
#Область Функционал_траспорта

// Выполняет HTTP запрос к сервису. Возвращает HTTPОтвет
//
// Параметры:
//  пПараметрыОбмена  - Структура - общие параметры обмена
//  пТекстЗапроса  - Строка - строка запроса к сервису
//  пЗаголовки  - Структура - заголовки к запросу
//  пДвоичныеДанные  - Двоичные данные - данные для помещения в тело запроса
//  пТекстОшибки  - Строка - текст сообщения в случае кода возврата не равного 200
//
// Возвращаемое значение:
//   HTTPОтвет, Неопределено   - полученный с сервиса ответ
//
Функция ВыполнитьHTTPЗапросОтвет(пПараметрыОбмена, пТекстЗапроса, пЗаголовки = Неопределено, пДвоичныеДанные = Неопределено, пТекстОшибки = "") Экспорт
	Попытка
		Если пПараметрыОбмена.Защищенное Тогда
			ssl = Новый ЗащищенноеСоединениеOpenSSL;
			Соединение = Новый HTTPСоединение(пПараметрыОбмена.АдресСайта, 443, , , ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https"), 60, ssl);
		Иначе
			Соединение = Новый HTTPСоединение(пПараметрыОбмена.АдресСайта, , , , ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http"), 60);
		КонецЕсли;
		Запрос = ?(пЗаголовки = Неопределено, Новый HTTPЗапрос(пТекстЗапроса), Новый HTTPЗапрос(пТекстЗапроса, пЗаголовки));
		Если пДвоичныеДанные = Неопределено Тогда
			HTTPОтвет	= Соединение.Получить(Запрос);
		Иначе
			Запрос.УстановитьТелоИзДвоичныхДанных(пДвоичныеДанные);
			
			Если ПараметрыСеанса.ТестированиеОбменаССайтом = Истина Тогда
				Попытка
					// В случае тестирования двоичные данные записываем в специальную папку
					лПуть = КаталогВременныхФайлов() + "ДанныеСайта\";
					лФайл = Новый Файл(лПуть);
					Если Не лФайл.Существует() Тогда
						СоздатьКаталог(лПуть);
					КонецЕсли;
					
					лИмяПакета = XMLСтрока(Новый УникальныйИдентификатор);
					лИмяФайла = лПуть + лИмяПакета + ".Site_data";
					пДвоичныеДанные.Записать(лИмяФайла);
					
					лИмяФайла = лПуть + лИмяПакета + ".Site_url";
					лЗапись = Новый ЗаписьТекста(лИмяФайла, КодировкаТекста.Системная, , Ложь);
					лЗапись.ЗаписатьСтроку(пТекстЗапроса);
					лЗапись.Закрыть();
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка логирования обмена с сайтом'; en = 'Error logging the exchange with the site'; fr = 'Error logging the exchange with the site'; de = 'Error logging the exchange with the site'; it = 'Error logging the exchange with the site'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
			
			HTTPОтвет	= Соединение.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось подключиться к сайту'; en = 'Failed to connect to site'; fr = 'Impossible de se connecter au site'; de = 'Verbindung zum Server konnte nicht hergestellt site'; it = 'Failed to connect to site'") +
			"! " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Подключение", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	Если Не HTTPОтвет.КодСостояния = 200 Тогда
		Если ЗначениеЗаполнено(пТекстОшибки) Тогда
			ТекстСообщения = пТекстОшибки;
		Иначе
			ТекстСообщения = НСтр("ru = 'При выполнении запроса к сайту получен код:'");
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + " " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Подключение", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	Возврат HTTPОтвет;
КонецФункции

// Выполняет HTTP запрос к сервису. Возвращает строку (тело ответа)
//
// Параметры:
//  пПараметрыОбмена  - Структура - общие параметры обмена
//  пТекстЗапроса  - Строка - строка запроса к сервису
//  пЗаголовки  - Структура - заголовки к запросу
//  пДвоичныеДанные  - Двоичные данные - данные для помещения в тело запроса
//  пТекстОшибки  - Строка - текст сообщения в случае кода возврата не равного 200
//
// Возвращаемое значение:
//   Строка, Неопределено   - полученный от сервиса ответ
//
Функция ВыполнитьHTTPЗапросТело(пПараметрыОбмена, пТекстЗапроса, пЗаголовки = Неопределено, пДвоичныеДанные = Неопределено, пТекстОшибки = "") Экспорт
	лОтвет = ВыполнитьHTTPЗапросОтвет(пПараметрыОбмена, пТекстЗапроса, пЗаголовки, пДвоичныеДанные, пТекстОшибки);
	Если лОтвет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат лОтвет.ПолучитьТелоКакСтроку();
КонецФункции

// Выполняет HTTP запрос к сервису. Возвращает адрес в хранилище на двоичные данные
//
// Параметры:
//  пПараметрыОбмена  - Структура - общие параметры обмена
//  пТекстЗапроса  - Строка - строка запроса к сервису
//  пЗаголовки  - Структура - заголовки к запросу
//  пДвоичныеДанные  - Двоичные данные - данные для помещения в тело запроса
//  пАдресФормы  - Строка, УникальныйИдентификатор формы - используется при помещении во внешнее хранилище
//  пТекстОшибки  - Строка - текст сообщения в случае кода возврата не равного 200
//
// Возвращаемое значение:
//   Строка, Неопределено   - адрес в хранилище
//
Функция ВыполнитьHTTPЗапросДвоичныеДанные(пПараметрыОбмена, пТекстЗапроса, пЗаголовки = Неопределено, пДвоичныеДанные = Неопределено, пАдресФормы = Неопределено, пТекстОшибки = "") Экспорт
	лОтвет = ВыполнитьHTTPЗапросОтвет(пПараметрыОбмена, пТекстЗапроса, пЗаголовки, пДвоичныеДанные, пТекстОшибки);
	Если лОтвет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	лДвоичныеДанные = лОтвет.ПолучитьТелоКакДвоичныеДанные();
	АдресВХранилище	= ПоместитьВоВременноеХранилище(лДвоичныеДанные, пАдресФормы);
	Возврат АдресВХранилище;
КонецФункции

#КонецОбласти

// Выполняет загрузку данных с сайта
//
// Параметры:
//  Отказ  - Булево - флаг наличия ошибки (возвращаемый параметр)
//  УзелИнформационнойБазы  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//
Процедура ВыполнитьЗагрузку(Отказ, УзелИнформационнойБазы) Экспорт
	ПараметрыВыгрузки = СформироватьПараметры(УзелИнформационнойБазы);
	Если ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Ложь Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	ЗагрузитьПользователей(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	//Исключение
	//	// Общая ошибка загрузки заказов
	//	лОписаниеОшибки = ОписаниеОшибки();
	//	ТекстСообщения = НСтр("ru = 'Общая ошибка загрузки Пользователей с сайта'") + ": " + лОписаниеОшибки;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//	ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
	//КонецПопытки;
	
	Попытка
		ЗагрузитьЗаказы(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка загрузки заказов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка загрузки Заказов с сайта'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Выполняет выгрузку данных на сайт
//
// Параметры:
//  Отказ  - Булево - флаг наличия ошибки (возвращаемый параметр)
//  УзелИнформационнойБазы  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//
Процедура ВыполнитьВыгрузку(Отказ, УзелИнформационнойБазы) Экспорт
	ПараметрыВыгрузки = СформироватьПараметры(УзелИнформационнойБазы);
	Если ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Ложь Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыгрузитьГорода(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки городов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки городов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьРегионы(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки регионов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки регионов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьАдминистративныеОкруга(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки административных округов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки админ. округов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьРайоны(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки районов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки районов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьСтороны(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки сторон
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки сторон на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьРазмеры(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки размеров
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки размеров на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьТипы(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки типов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки типов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьРекламныеБлоки(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки рекламных блоков
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки рекламных блоков на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьЦеныИЗанятостиРекламныхБлоков(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки цени и занятости
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки цен и занятости на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьПользователей(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки пользователей
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки пользователей на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьФотоотчетыИЗаказы(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
	Исключение
		// Общая ошибка выгрузки фотоотчетов
		лОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Общая ошибка выгрузки фотоотчетов на сайт'") + ": " + лОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	// Пока отключаем этот метод
	//ПересчетФильтров(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ);
КонецПроцедуры

#Область Загрузка_данных

// Выполняет загрузку нового партнера с сайта
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - параметры обмена
//  Узел  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//  Отказ  - Булево - флаг наличия ошибки (возвращаемый параметр)
//  Емайл  - Строка - email партнера
//
// Возвращаемое значение:
//  Структура, Неопределено - ссылки на партнера и контрагента
//
Функция ЗагрузитьНовогоПартнера(ПараметрыВыгрузки, Узел, Отказ, Емайл)
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("get_users", ПараметрыВыгрузки);
	
	ДвоичныеДанныеemail = СоздатьСообщение_Текст("email",	Емайл);
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеemail);
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки",			Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось загрузить пользователей с сайта'"));
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	лПартнерСсылка		= Справочники.Партнеры.ПустаяСсылка();
	лКонтрагентСсылка	= Справочники.Контрагенты.ПустаяСсылка();
	Если СтруктураОтвета.Свойство("USERS") Тогда
		#Область Загрузка_полученных_данных_в_таблицу_значений
		лТипСтрока50	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50));
		лТипСтрока100	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		
		лДанныеСайта = Новый ТаблицаЗначений;
		лДанныеСайта.Колонки.Добавить("ID",			лТипСтрока50);
		лДанныеСайта.Колонки.Добавить("LOGIN",		лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("EMAIL",		лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("NAME",		лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("LAST_NAME",	лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("PHONE",		лТипСтрока50);
		лДанныеСайта.Колонки.Добавить("UUID",		лТипСтрока50);
		лДанныеСайта.Колонки.Добавить("COMPANY",	лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("ZIP",		лТипСтрока50);
		лДанныеСайта.Колонки.Добавить("CITY",		лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("STREET",		лТипСтрока100);
		лДанныеСайта.Колонки.Добавить("INN",		лТипСтрока50);
		лДанныеСайта.Колонки.Добавить("Партнер",	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		
		Для каждого СтрокаЗаказа Из СтруктураОтвета.USERS Цикл
			НоваяСтрока = лДанныеСайта.Добавить();
			НоваяСтрока.ID			= СтрокаЗаказа.ID;
			НоваяСтрока.LOGIN		= СтрокаЗаказа.LOGIN;
			НоваяСтрока.EMAIL		= СтрокаЗаказа.EMAIL;
			НоваяСтрока.NAME		= СтрокаЗаказа.NAME;
			НоваяСтрока.LAST_NAME	= СтрокаЗаказа.LAST_NAME;
			НоваяСтрока.PHONE		= СтрокаЗаказа.PHONE;
			НоваяСтрока.UUID		= СтрокаЗаказа.UUID;
			НоваяСтрока.COMPANY		= СтрокаЗаказа.COMPANY;
			НоваяСтрока.ZIP			= СтрокаЗаказа.ZIP;
			НоваяСтрока.CITY		= СтрокаЗаказа.CITY;
			НоваяСтрока.STREET		= СтрокаЗаказа.STREET;
			НоваяСтрока.INN			= СтрокаЗаказа.INN;
			// Если заполнен УИД, тогда пробуем найти по нему
			Если ЗначениеЗаполнено(СтрокаЗаказа.UUID) Тогда
				НоваяСтрока.Партнер = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаЗаказа.UUID));
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти
		
		Если лДанныеСайта.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		#Область Получение_данных_из_базы
		// Получаем список партнеров по Email для новых пользователей
		// Дополняем его списком существующих партнеров (для обновления)
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныеДанные", лДанныеСайта);
		// Данные выбираются 3-мя запросами:
		//	1. Через контрагентов по ИНН
		//	2. Через контактную информацию Партнеров по Email
		//	3. По найденному по УИД элементу.
		// Контактные лица "цепляются" вв последнем запросе
		// Еще отдельно определяются контрагенты - их может быть несколько для каждого партнера, берем "МАКСИМУМ"
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВТ_ИсходныеДанные.ID КАК ID,
			|	ВТ_ИсходныеДанные.LOGIN КАК LOGIN,
			|	ВТ_ИсходныеДанные.EMAIL КАК EMAIL,
			|	ВТ_ИсходныеДанные.NAME КАК NAME,
			|	ВТ_ИсходныеДанные.LAST_NAME КАК LAST_NAME,
			|	ВТ_ИсходныеДанные.PHONE КАК PHONE,
			|	ВТ_ИсходныеДанные.COMPANY КАК COMPANY,
			|	ВТ_ИсходныеДанные.ZIP КАК ZIP,
			|	ВТ_ИсходныеДанные.CITY КАК CITY,
			|	ВТ_ИсходныеДанные.STREET КАК STREET,
			|	ВТ_ИсходныеДанные.INN КАК INN,
			|	ВТ_ИсходныеДанные.Партнер КАК Партнер
			|ПОМЕСТИТЬ ВТ_ДанныеССайта
			|ИЗ
			|	&ИсходныеДанные КАК ВТ_ИсходныеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контрагенты.Партнер КАК Партнер,
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ВТ_ДанныеССайта.ID КАК ID,
			|	ВТ_ДанныеССайта.LOGIN КАК LOGIN,
			|	ВТ_ДанныеССайта.EMAIL КАК EMAIL,
			|	ВТ_ДанныеССайта.NAME КАК NAME,
			|	ВТ_ДанныеССайта.LAST_NAME КАК LAST_NAME,
			|	ВТ_ДанныеССайта.PHONE КАК PHONE,
			|	ВТ_ДанныеССайта.COMPANY КАК COMPANY,
			|	ВТ_ДанныеССайта.ZIP КАК ZIP,
			|	ВТ_ДанныеССайта.CITY КАК CITY,
			|	ВТ_ДанныеССайта.STREET КАК STREET,
			|	ВТ_ДанныеССайта.INN КАК INN
			|ПОМЕСТИТЬ ВТ_Итог
			|ИЗ
			|	ВТ_ДанныеССайта КАК ВТ_ДанныеССайта
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО ВТ_ДанныеССайта.INN = Контрагенты.ИНН
			|ГДЕ
			|	ВТ_ДанныеССайта.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И ВТ_ДанныеССайта.INN > """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Спр_Партн_КИ.Ссылка,
			|	NULL,
			|	ВТ_ДанныеССайта.ID,
			|	ВТ_ДанныеССайта.LOGIN,
			|	ВТ_ДанныеССайта.EMAIL,
			|	ВТ_ДанныеССайта.NAME,
			|	ВТ_ДанныеССайта.LAST_NAME,
			|	ВТ_ДанныеССайта.PHONE,
			|	ВТ_ДанныеССайта.COMPANY,
			|	ВТ_ДанныеССайта.ZIP,
			|	ВТ_ДанныеССайта.CITY,
			|	ВТ_ДанныеССайта.STREET,
			|	ВТ_ДанныеССайта.INN
			|ИЗ
			|	ВТ_ДанныеССайта КАК ВТ_ДанныеССайта
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК Спр_Партн_КИ
			|		ПО (Спр_Партн_КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|			И (Спр_Партн_КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера))
			|			И (ВТ_ДанныеССайта.EMAIL = Спр_Партн_КИ.Представление
			|				ИЛИ ВТ_ДанныеССайта.EMAIL = Спр_Партн_КИ.АдресЭП)
			|ГДЕ
			|	ВТ_ДанныеССайта.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И ВТ_ДанныеССайта.INN = """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_ДанныеССайта.Партнер,
			|	NULL,
			|	ВТ_ДанныеССайта.ID,
			|	ВТ_ДанныеССайта.LOGIN,
			|	ВТ_ДанныеССайта.EMAIL,
			|	ВТ_ДанныеССайта.NAME,
			|	ВТ_ДанныеССайта.LAST_NAME,
			|	ВТ_ДанныеССайта.PHONE,
			|	ВТ_ДанныеССайта.COMPANY,
			|	ВТ_ДанныеССайта.ZIP,
			|	ВТ_ДанныеССайта.CITY,
			|	ВТ_ДанныеССайта.STREET,
			|	ВТ_ДанныеССайта.INN
			|ИЗ
			|	ВТ_ДанныеССайта КАК ВТ_ДанныеССайта
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Спр_Партн
			|		ПО ВТ_ДанныеССайта.Партнер = Спр_Партн.Ссылка
			|ГДЕ
			|	НЕ ВТ_ДанныеССайта.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ДанныеССайта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Итог.Партнер КАК Партнер,
			|	МАКСИМУМ(Спр_Контр.Ссылка) КАК Контрагент
			|ПОМЕСТИТЬ ВТ_Контрагенты
			|ИЗ
			|	ВТ_Итог КАК ВТ_Итог
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Спр_Контр
			|		ПО ВТ_Итог.Партнер = Спр_Контр.Партнер
			|ГДЕ
			|	НЕ ВТ_Итог.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И ВТ_Итог.Контрагент ЕСТЬ NULL
			|	И Спр_Контр.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Итог.Партнер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Итог.Партнер КАК Партнер,
			|	ЕСТЬNULL(ВТ_Итог.Контрагент, ВТ_Контрагенты.Контрагент) КАК Контрагент,
			|	ВТ_Итог.ID КАК ID,
			|	ВТ_Итог.LOGIN КАК LOGIN,
			|	ВТ_Итог.EMAIL КАК EMAIL,
			|	ВТ_Итог.NAME КАК NAME,
			|	ВТ_Итог.LAST_NAME КАК LAST_NAME,
			|	ВТ_Итог.PHONE КАК PHONE,
			|	ВТ_Итог.COMPANY КАК COMPANY,
			|	ВТ_Итог.ZIP КАК ZIP,
			|	ВТ_Итог.CITY КАК CITY,
			|	ВТ_Итог.STREET КАК STREET,
			|	ВТ_Итог.INN КАК INN,
			|	КонтЛицаПартнера.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	ВТ_Итог КАК ВТ_Итог
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтЛицаПартнера
			|		ПО ВТ_Итог.Партнер = КонтЛицаПартнера.Владелец
			|			И ВТ_Итог.LAST_NAME = КонтЛицаПартнера.Фамилия
			|			И ВТ_Итог.NAME = КонтЛицаПартнера.Имя
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
			|		ПО ВТ_Итог.Партнер = ВТ_Контрагенты.Партнер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Итог
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Контрагенты";
		РезультатЗапроса = Запрос.Выполнить();
		#КонецОбласти
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			#Область Создание_обновление_партнера
			Если ЗначениеЗаполнено(Выборка.Партнер) Тогда
				лПартнерСсылка = Выборка.Партнер;
			Иначе
				// Создаем нового партнера
				лПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
			
				#Область Обновление_реквизитов_партнера
				Если Не лПартнерОбъект.Наименование = Выборка.COMPANY Тогда
					лПартнерОбъект.Наименование = Выборка.COMPANY;
				КонецЕсли;
				Если Не лПартнерОбъект.НаименованиеПолное = Выборка.COMPANY Тогда
					лПартнерОбъект.НаименованиеПолное = Выборка.COMPANY;
				КонецЕсли;
				Если лПартнерОбъект.Клиент = Ложь Тогда
					лПартнерОбъект.Клиент = Истина;
				КонецЕсли;
				
				лТабКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
				СтрокаКонтактнойИнформации.Представление	= Выборка.EMAIL;
				
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
				СтрокаКонтактнойИнформации.Представление	= СокрЛП(Выборка.PHONE);
				
				УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(лПартнерОбъект, лТабКИ);
				#КонецОбласти
				
				#Область Запись_партнера
				Попытка
					лПартнерОбъект.Записать();
				Исключение
					Отказ = Истина;
					ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось записать партнера с ИНН %INN%'") +
						ОписаниеОшибки();
					ТекстНеУспешногоСообщения = СтрЗаменить(ТекстНеУспешногоСообщения, "%INN%", Выборка.INN);
					ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
					Продолжить;
				КонецПопытки;
				лПартнерСсылка = лПартнерОбъект.Ссылка;
				
				лЗапись = РегистрыСведений.УчетныеЗаписиИнтернетПользователей.СоздатьМенеджерЗаписи();
				лЗапись.Логин		= Выборка.LOGIN;
				лЗапись.Покупатель	= лПартнерСсылка;
				лЗапись.Пароль		= ПользователиКлиентСервер.СгенерироватьПароль();
				лЗапись.ЭлПочта		= Выборка.EMAIL;
				лЗапись.Записать(Истина);
				
				#КонецОбласти
				
			КонецЕсли;
			#КонецОбласти
			
			#Область Создание_обновление_контактного_лица
			Если Не ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда
				лКонтакЛицоОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
				лКонтакЛицоОбъект.Владелец		= лПартнерСсылка;
				лКонтакЛицоОбъект.Фамилия		= Выборка.LAST_NAME;
				лКонтакЛицоОбъект.Имя			= Выборка.NAME;
				лКонтакЛицоОбъект.Наименование	= лКонтакЛицоОбъект.Фамилия + " " + лКонтакЛицоОбъект.Имя;
				
				лТабКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				СтрокаКонтактнойИнформации.Представление	= Выборка.EMAIL;
				
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
				СтрокаКонтактнойИнформации.Представление	= СокрЛП(Выборка.PHONE);
				
				УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(лКонтакЛицоОбъект, лТабКИ);
				
				лКонтакЛицоОбъект. Записать();
			КонецЕсли;
			#КонецОбласти
			
			#Область Создание_обновление_контрагента
			Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
				лКонтрагентСсылка = Выборка.Контрагент;
				
			Иначе
				лКонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				лКонтрагентОбъект.Наименование			= Выборка.COMPANY;
				лКонтрагентОбъект.НаименованиеПолное	= Выборка.COMPANY;
				лКонтрагентОбъект.ИНН					= Выборка.INN;
				лКонтрагентОбъект.Партнер				= лПартнерСсылка;
				
				лТабКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				СтрокаКонтактнойИнформации.Представление	= Выборка.EMAIL;
				
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.АдресПартнера;
				СтрокаКонтактнойИнформации.Представление	= СокрЛП(Выборка.ZIP) + ", " + СокрЛП(Выборка.CITY) + ", " + СокрЛП(Выборка.STREET);
				
				СтрокаКонтактнойИнформации = лТабКИ.Добавить();
				СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				СтрокаКонтактнойИнформации.Представление	= СокрЛП(Выборка.PHONE);
				
				УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(лКонтрагентОбъект, лТабКИ);
				
				лКонтрагентОбъект.Записать();
				лКонтрагентСсылка = лКонтрагентОбъект.Ссылка;
			КонецЕсли;
			#КонецОбласти
			
		КонецЦикла;
		
	Иначе
		// В ответе сайта нет блока Заказов
		Отказ = Истина;
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось загрузить заказы с сайта'; en = 'Failed to download orders from website'; fr = 'Failed to download orders from website'; it = 'Failed to download orders from website'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
	КонецЕсли;
	
	Возврат Новый Структура("Партнер, Контрагент", лПартнерСсылка, лКонтрагентСсылка);
КонецФункции

// Выполняет загрузку заказов с сайта
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - параметры обмена
//  Узел  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//  Отказ  - Булево - флаг наличия ошибки (возвращаемый параметр)
//
Процедура ЗагрузитьЗаказы(ПараметрыВыгрузки, Узел, Отказ)
	МассивЗаказов = Новый Массив;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("get_new_orders", ПараметрыВыгрузки);
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки",			Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	HTTPОтвет	= ВыполнитьHTTPЗапросОтвет(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело);
	Если HTTPОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтветСайта	= HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния	= 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("ORDERS") Тогда
			#Область Загрузка_полученных_данных_в_таблицу_значений
			ТаблицаЗаказы = Новый ТаблицаЗначений;
			ТаблицаЗаказы.Колонки.Добавить("ORDER_ID", 		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
			ТаблицаЗаказы.Колонки.Добавить("ORDER_UUID", 	Новый ОписаниеТипов("Строка"));
			ТаблицаЗаказы.Колонки.Добавить("BLOCK_ID", 		Новый ОписаниеТипов("Строка"));
			ТаблицаЗаказы.Колонки.Добавить("ITEM_KEY", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
			ТаблицаЗаказы.Колонки.Добавить("DATE_FROM", 	Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(Частидаты.Дата)));
			ТаблицаЗаказы.Колонки.Добавить("DATE_TO", 		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(Частидаты.Дата)));
			ТаблицаЗаказы.Колонки.Добавить("PRICE", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ТаблицаЗаказы.Колонки.Добавить("USER_UID", 		Новый ОписаниеТипов("Строка"));
			ТаблицаЗаказы.Колонки.Добавить("USER_LOGIN", 	Новый ОписаниеТипов("Строка"));
			ТаблицаЗаказы.Колонки.Добавить("USER_EMAIL", 	Новый ОписаниеТипов("Строка"));
			ТаблицаЗаказы.Колонки.Добавить("ORDER_COMMENT", Новый ОписаниеТипов("Строка"));
			
			Для каждого СтрокаЗаказа Из СтруктураОтвета.ORDERS Цикл
				НоваяСтрока = ТаблицаЗаказы.Добавить();
				НоваяСтрока.ORDER_ID		= СтрокаЗаказа.ORDER_ID;
				НоваяСтрока.ORDER_UUID		= СтрокаЗаказа.ORDER_UUID;
				НоваяСтрока.BLOCK_ID		= СтрокаЗаказа.BLOCK_ID;
				НоваяСтрока.ITEM_KEY		= Число(СтрокаЗаказа.ITEM_KEY);
				НоваяСтрока.DATE_FROM		= Дата(СтрЗаменить(СтрокаЗаказа.DATE_FROM, "-", ""));
				НоваяСтрока.DATE_TO			= ?(ПустаяСтрока(СтрокаЗаказа.DATE_TO), Дата(1, 1, 1), Дата(СтрЗаменить(СтрокаЗаказа.DATE_TO, "-", "")));
				НоваяСтрока.USER_UID		= СтрокаЗаказа.USER_UID;
				НоваяСтрока.PRICE			= Число(СтрокаЗаказа.PRICE);
				НоваяСтрока.USER_LOGIN		= СтрокаЗаказа.USER_LOGIN;
				НоваяСтрока.USER_EMAIL		= СтрокаЗаказа.USER_EMAIL;
				НоваяСтрока.ORDER_COMMENT	= СтрокаЗаказа.ORDER_COMMENT;
			КонецЦикла;
			#КонецОбласти
			
			Если ТаблицаЗаказы.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			#Область Получение_данных_из_базы
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаЗаказы", ТаблицаЗаказы);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаЗаказы.ORDER_ID КАК ORDER_ID,
				|	ТаблицаЗаказы.ORDER_UUID КАК ORDER_UUID,
				|	ТаблицаЗаказы.BLOCK_ID КАК BLOCK_ID,
				|	ТаблицаЗаказы.ITEM_KEY КАК ITEM_KEY,
				|	ТаблицаЗаказы.DATE_FROM КАК DATE_FROM,
				|	ТаблицаЗаказы.DATE_TO КАК DATE_TO,
				|	ТаблицаЗаказы.USER_UID КАК USER_UID,
				|	ТаблицаЗаказы.USER_LOGIN КАК USER_LOGIN,
				|	ТаблицаЗаказы.USER_EMAIL КАК USER_EMAIL,
				|	ТаблицаЗаказы.ORDER_COMMENT КАК ORDER_COMMENT,
				|	ТаблицаЗаказы.PRICE КАК PRICE
				|ПОМЕСТИТЬ ВТ_ДанныеССайта
				|ИЗ
				|	&ТаблицаЗаказы КАК ТаблицаЗаказы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказПокупателя.Ссылка КАК Заказ,
				|	ЗаказПокупателя.НомерЭлектронногоДокумента КАК НомерЭлектронногоДокумента
				|ПОМЕСТИТЬ ВТ_Заказы
				|ИЗ
				|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|ГДЕ
				|	ЗаказПокупателя.НомерЭлектронногоДокумента В
				|			(ВЫБРАТЬ
				|				Т.ORDER_ID
				|			ИЗ
				|				ВТ_ДанныеССайта КАК Т)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ДанныеССайта.ORDER_ID КАК ORDER_ID,
				|	ВТ_ДанныеССайта.ORDER_UUID КАК ORDER_UUID,
				|	ВТ_ДанныеССайта.BLOCK_ID КАК BLOCK_ID,
				|	ВТ_ДанныеССайта.ITEM_KEY КАК ITEM_KEY,
				|	ВТ_ДанныеССайта.DATE_FROM КАК DATE_FROM,
				|	ВТ_ДанныеССайта.DATE_TO КАК DATE_TO,
				|	ВТ_ДанныеССайта.USER_UID КАК USER_UID,
				|	ВТ_ДанныеССайта.USER_LOGIN КАК USER_LOGIN,
				|	ВТ_ДанныеССайта.USER_EMAIL КАК USER_EMAIL,
				|	ВТ_ДанныеССайта.ORDER_COMMENT КАК ORDER_COMMENT,
				|	ВТ_ДанныеССайта.PRICE КАК PRICE,
				|	ВТ_Заказы.Заказ КАК Заказ
				|ИЗ
				|	ВТ_ДанныеССайта КАК ВТ_ДанныеССайта
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
				|		ПО ВТ_ДанныеССайта.ORDER_ID = ВТ_Заказы.НомерЭлектронногоДокумента
				|
				|УПОРЯДОЧИТЬ ПО
				|	ITEM_KEY
				|ИТОГИ
				|	МАКСИМУМ(USER_UID),
				|	МАКСИМУМ(USER_LOGIN),
				|	МАКСИМУМ(USER_EMAIL),
				|	МАКСИМУМ(Заказ)
				|ПО
				|	ORDER_ID
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_ДанныеССайта
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_Заказы";
			РезультатЗапроса = Запрос.Выполнить();
			#КонецОбласти
			
			ВыборкаORDER_ID = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗапросКонтрагент = Новый Запрос;
			ЗапросКонтрагент.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Контрагент
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Партнер = &Партнер
				|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
			#Область Обновление_создание_заказов
			Пока ВыборкаORDER_ID.Следующий() Цикл
				#Область Определяем_ссылку_на_заказ
				СсылкаНаЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
				Если Не ПустаяСтрока(ВыборкаORDER_ID.ORDER_UUID) Тогда
					Попытка
						СсылкаНаЗаказ = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыборкаORDER_ID.ORDER_UUID));
					Исключение
						Если ЗначениеЗаполнено(ВыборкаORDER_ID.Заказ) Тогда
							СсылкаНаЗаказ = ВыборкаORDER_ID.Заказ;
						КонецЕсли;
					КонецПопытки;
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаORDER_ID.Заказ) Тогда
					СсылкаНаЗаказ = ВыборкаORDER_ID.Заказ;
					
				КонецЕсли;
				#КонецОбласти
				
				Если СсылкаНаЗаказ = Неопределено Или СсылкаНаЗаказ.Пустая() Или Не ЗначениеЗаполнено(СсылкаНаЗаказ.Номер) Тогда
					СсылкаНаПартнера	= Неопределено;
					СсылкаНаКонтрагента	= Неопределено;
					Если ЗначениеЗаполнено(ВыборкаORDER_ID.USER_UID) Тогда
						Попытка
							СсылкаНаПартнера = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыборкаORDER_ID.USER_UID));
						Исключение
						КонецПопытки;
					Иначе
						лДанныеПартнераКонтрагента = ЗагрузитьНовогоПартнера(ПараметрыВыгрузки, Узел, Отказ, СокрЛП(ВыборкаORDER_ID.USER_EMAIL));
						Если Не лДанныеПартнераКонтрагента = Неопределено Тогда
							СсылкаНаПартнера	= лДанныеПартнераКонтрагента.Партнер;
							СсылкаНаКонтрагента	= лДанныеПартнераКонтрагента.Контрагент;
						КонецЕсли;
//						СсылкаНаПартнера = СоздатьНовогоПартнера(СокрЛП(ВыборкаORDER_ID.USER_LOGIN), СокрЛП(ВыборкаORDER_ID.USER_EMAIL), Узел);
					КонецЕсли;
					
					Если СсылкаНаПартнера = Неопределено Или СсылкаНаПартнера.Пустая() Или Не ЗначениеЗаполнено(СсылкаНаПартнера.Код) Тогда
						ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось идентифицировать покупателя в заказе по идентификатору'; en = 'Failed to identify customer in order by ID'; fr = 'Failed to identify customer in order by ID'; it = 'Failed to identify customer in order by ID'") +
							" " + Строка(ВыборкаORDER_ID.USER_UID) + Символы.ПС +
							НСтр("ru = 'Возможно покупатель был создан вручную, а не загружен из программы.'; en = 'Probably user was created manually instead of being created in the program.'; fr = 'Probably user was created manually instead of being created in the program.'; it = 'Probably user was created manually instead of being created in the program.'") +
							Символы.ПС +
							НСтр("ru = 'Заказ с таким покупателем не будет загружен!'; en = 'The order with such customer will not be loaded!'; fr = 'The order with such customer will not be loaded!'; it = 'The order with such customer will not be loaded!'");
						ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
						Отказ = Истина;
						Продолжить;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СсылкаНаКонтрагента) И ЗначениеЗаполнено(СсылкаНаПартнера) Тогда
						ЗапросКонтрагент.УстановитьПараметр("Партнер",	СсылкаНаПартнера);
						ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();
						Если ВыборкаКонтрагент.Следующий() Тогда
							СсылкаНаКонтрагента = ВыборкаКонтрагент.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
					НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
					ЗаполнитьШапкуДокумента(НовыйЗаказ, ПараметрыСеанса.ТекущийПользователь, Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
					НовыйЗаказ.Дата 						= ТекущаяДата();
					НовыйЗаказ.ВидОперации 					= Перечисления.ВидыОперацийЗаказовПокупателей.РазмещениеРекламы;
					НовыйЗаказ.СтатусДокумента				= Перечисления.СтатусыЗаказовПокупателей.Новый;
					НовыйЗаказ.НомерЭлектронногоДокумента	= ВыборкаORDER_ID.ORDER_ID;
					НовыйЗаказ.Партнер						= СсылкаНаПартнера;
					НовыйЗаказ.Контрагент					= СсылкаНаКонтрагента;
					НовыйЗаказ.Организация					= ПараметрыВыгрузки.Организация;
					НовыйЗаказ.ГрафикОплаты					= ПараметрыВыгрузки.ГрафикОплатыПокупателейДляПродажиЧерезWEB;
					НовыйЗаказ.ВидОплаты					= НовыйЗаказ.ГрафикОплаты.ВидОплаты;
					НовыйЗаказ.ТипЦен						= ПараметрыВыгрузки.ТипЦеныПродажиЧерезWeb;
					НовыйЗаказ.Комментарий 					= ПараметрыВыгрузки.Комментарий;
					СтавкаНДС								= ПолучитьСтавкуНДСОрганизации(ПараметрыВыгрузки.Организация, ПараметрыСеанса.ТекущийПользователь, НовыйЗаказ.Дата);
					ВариантСтатусаРазмещения				= ПараметрыВыгрузки.СтатусРазмещенийПриЗагрузкеСWEB;
					ЧислоДнейВрезерве						= ПараметрыВыгрузки.ЧислоДнейВРезервеПриЗагрузкеСWEB;
					
					лСтрокиЗаказа = ТаблицаЗаказы.НайтиСтроки(Новый Структура("ORDER_ID", ВыборкаORDER_ID.ORDER_ID));
					Если лСтрокиЗаказа.Количество() > 0 И ЗначениеЗаполнено(лСтрокиЗаказа[0].ORDER_COMMENT) Тогда
						НовыйЗаказ.Комментарий = лСтрокиЗаказа[0].ORDER_COMMENT;
					КонецЕсли;
					
					Выборка = ВыборкаORDER_ID.Выбрать();
					Пока Выборка.Следующий() Цикл
						ДатаНачала 		= Выборка.DATE_FROM;
						ДатаОкончания 	= Выборка.DATE_TO;
						РекламныйБлок 	= Справочники.РекламныеБлоки.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.BLOCK_ID));
						Цена 			= Выборка.PRICE;
						
						НоваяСтрокаЗаказа = НовыйЗаказ.Реклама.Добавить();
						НоваяСтрокаЗаказа.РекламныйБлок			= РекламныйБлок;
						НоваяСтрокаЗаказа.Канал					= НоваяСтрокаЗаказа.РекламныйБлок.Владелец;
						НоваяСтрокаЗаказа.ВариантРеализации		= НоваяСтрокаЗаказа.РекламныйБлок.ВариантРеализации;
						НоваяСтрокаЗаказа.Цена					= Цена;
						НоваяСтрокаЗаказа.Сумма					= Цена;
						НоваяСтрокаЗаказа.СуммаБезСкидки		= Цена;
						НоваяСтрокаЗаказа.Количество			= 1;
						НоваяСтрокаЗаказа.ДатаНачала			= ДатаНачала;
						НоваяСтрокаЗаказа.ДатаОкончания			= ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, КонецМесяца(ДатаНачала));
						НоваяСтрокаЗаказа.ПериодЦены			= Перечисления.ПериодичностьРазмещения.Месяц;
						НоваяСтрокаЗаказа.КлючСтроки			= ПолучитьНовыйКлючСтроки(НовыйЗаказ, "Реклама");
						НоваяСтрокаЗаказа.ДатаСозданияСтроки	= ТекущаяДата();
						
						Если ПараметрыВыгрузки.СтатусРазмещенийПриЗагрузкеСWEB = Перечисления.ВариантыСтатусовРазмещенийПриЗагрузкеССайта.ВРезерве Тогда
							НоваяСтрокаЗаказа.СтатусРазмещения = Перечисления.СтатусыРазмещений.ВРезерве;
							НоваяСтрокаЗаказа.СрокРезерва = ТекущаяДата() + ЧислоДнейВрезерве * 3600 * 24;
						Иначе
							НоваяСтрокаЗаказа.СтатусРазмещения = Перечисления.СтатусыРазмещений.Новый;
						КонецЕсли;
						
						Если НоваяСтрокаЗаказа.ДатаНачала < НовыйЗаказ.ДатаНачала Или НовыйЗаказ.ДатаНачала = Дата(1, 1, 1) Тогда
							НовыйЗаказ.ДатаНачала = НоваяСтрокаЗаказа.ДатаНачала;
						КонецЕсли;
						
						Если НоваяСтрокаЗаказа.ДатаОкончания > НовыйЗаказ.ДатаОкончания Тогда
							НовыйЗаказ.ДатаОкончания = НоваяСтрокаЗаказа.ДатаОкончания;
						КонецЕсли;
						
						НоваяСтрокаЗаказа.СтавкаНДС = СтавкаНДС;
						Ставка = ПолучитьСтавкуНДС(НоваяСтрокаЗаказа.СтавкаНДС);
						НоваяСтрокаЗаказа.СуммаНДС = РассчитатьСуммуНДСУР(НоваяСтрокаЗаказа.Сумма, НовыйЗаказ.УчитыватьНДС, НовыйЗаказ.СуммаВключаетНДС, Ставка);
					КонецЦикла;
					НовыйЗаказ.СуммаДокумента = ПолучитьСуммуДокументаСНДС(НовыйЗаказ);
					Попытка
						НовыйЗаказ.Записать(РежимЗаписиДокумента.Запись);
						
						ОбработкаРР = Обработки.РасчетСтоимостиРазмещений.Создать();  // обработка расчета размещения										
						Для каждого СтрокаРазмещения Из НовыйЗаказ.Реклама Цикл
							Если СтрокаРазмещения.КлючСтроки = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							УстановитьПараметрыОбработкиРасчетаБезОткрытия(ОбработкаРР, СтрокаРазмещения, НовыйЗаказ);
							ОбработкаРР.РассчитатьСтоимость(СтрокаРазмещения.Цена);
							ОбновитьДанныеСтрокиИзОбработкиРасчета(ОбработкаРР, НовыйЗаказ);
						КонецЦикла;
						
						НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Отказ = Истина;
						ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось провести заказ'; en = 'Failed to post order'; fr = 'Failed to post order'; it = 'Failed to post order'") +
							" " + НовыйЗаказ.Номер + " " + НСтр("ru = 'от'; en = 'dated'; it = 'dated'") + " " + Формат(НовыйЗаказ.Дата, "ДФ=dd.MM.yyyy") +
							НСтр("ru = ', номер заказа на сайте '; en = ', web-site order number '; fr = ', Site web numéro de commande'; de = ', Web-Site-Bestellnummer'; it = ', web-site order number '") +
							ВыборкаORDER_ID.ORDER_ID + ".";
						ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
						НовыйЗаказ.Записать();
					КонецПопытки;
					
					Если ЗначениеЗаполнено(НовыйЗаказ.Ссылка) Тогда
						МенеджерЗаписей = РегистрыСведений.ЗагруженныеЗаказыССайта.СоздатьМенеджерЗаписи();
						МенеджерЗаписей.ЗаказПокупателя = НовыйЗаказ.Ссылка;
						МенеджерЗаписей.ТипЗаказа 		= Перечисления.ТипыЗагруженныхЗаказовССайта.Сайт;
						МенеджерЗаписей.Покупатель 		= НовыйЗаказ.Партнер;
						МенеджерЗаписей.ДатаЗагрузки 	= ТекущаяДата();
						МенеджерЗаписей.Записать(Истина);
					КонецЕсли;
					
					МассивЗаказов.Добавить(НовыйЗаказ.Ссылка);
					
				Иначе
					#Область Обновление_заказа_в_базе
					Если Не СсылкаНаЗаказ.НомерЭлектронногоДокумента = ВыборкаORDER_ID.ORDER_ID Тогда
						ОбъектЗаказ = СсылкаНаЗаказ.ПолучитьОбъект();
						ОбъектЗаказ.НомерЭлектронногоДокумента = ВыборкаORDER_ID.ORDER_ID;
						
						лСтрокиЗаказа = ТаблицаЗаказы.НайтиСтроки(Новый Структура("ORDER_ID", ВыборкаORDER_ID.ORDER_ID));
						Если лСтрокиЗаказа.Количество() > 0 И ЗначениеЗаполнено(лСтрокиЗаказа[0].ORDER_COMMENT) Тогда
							ОбъектЗаказ.Комментарий = лСтрокиЗаказа[0].ORDER_COMMENT;
						КонецЕсли;
						
						Попытка
							ОбъектЗаказ.Записать(?(ОбъектЗаказ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							Отказ = Истина;
							ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось обновить Заказ покупателя (ИД:'; en = 'Failed to update Customer order (ID:'; fr = 'Échec de actualiser Commande du client (ID:'; de = 'Fehler beim Aktualisieren Kundenbestellung (ID:'; it = 'Impossibile aggiornare Ordine cliente (ID:'") +
								" " + ВыборкаORDER_ID.ORDER_UUID + "), " +
								НСтр("ru = 'номер заказа на сайте'; en = 'web-site order number'; fr = 'Site web numéro de commande'; de = 'Web-Site-Bestellnummer'; it = 'web-site order number'") +
								" " + ВыборкаORDER_ID.ORDER_ID + ".";
							ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
						КонецПопытки;
					КонецЕсли;
					МассивЗаказов.Добавить(СсылкаНаЗаказ);
					#КонецОбласти
					
				КонецЕсли;
			КонецЦикла;
			#КонецОбласти
			
		Иначе
			// В ответе сайта нет блока Заказов
			Отказ = Истина;
			ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось загрузить заказы с сайта'; en = 'Failed to download orders from website'; fr = 'Failed to download orders from website'; it = 'Failed to download orders from website'") +
				". " + ОтветСайта;
			ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		КонецЕсли;
		
	Иначе
		// Код ответа не соответствует корректному завершению
		Отказ = Истина;
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось загрузить заказы с сайта'; en = 'Failed to download orders from website'; fr = 'Failed to download orders from website'; it = 'Failed to download orders from website'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
	КонецЕсли;
	
	Если МассивЗаказов.Количество() > 0 Тогда
		ИзменитьСтатусыЗаказов(ПараметрыВыгрузки, МассивЗаказов, Узел, Отказ);
	КонецЕсли;
КонецПроцедуры

// Выполняет поиск по эл. почте и при необходимости создание нового элемента справочника Партнеры
//
// Параметры:
//  Логин  - Строка - наименование партнера
//  Почта  - Строка - электронная почта партнера
//  Узел  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//
// Возвращаемое значение:
//   СправочникСсылка.Партнеры   - полученный элемент справочника
//
Функция СоздатьНовогоПартнера(Логин, Почта, Узел)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АдресЭП", Почта);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера)
		|	И (ПартнерыКонтактнаяИнформация.Представление = &АдресЭП
		|			ИЛИ ПартнерыКонтактнаяИнформация.АдресЭП = &АдресЭП)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Партнер;
	Иначе
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		НовыйПартнер.Наименование		= Логин;
		НовыйПартнер.НаименованиеПолное	= Логин;
		НовыйПартнер.Клиент				= Истина;
		
		НоваяКонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
		СтрокаКонтактнойИнформации = НоваяКонтактнаяИнформация.Добавить();
		СтрокаКонтактнойИнформации.Представление	= Почта;
		СтрокаКонтактнойИнформации.Вид				= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		СтрокаКонтактнойИнформации.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(НовыйПартнер, НоваяКонтактнаяИнформация);
		НовыйПартнер.Записать();
		
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Информация, Узел.Метаданные(), Узел,
			НСтр("ru = 'Создан новый партнер'") + " " + Логин);
		
		Возврат НовыйПартнер.Ссылка;
	КонецЕсли;
КонецФункции
	
#КонецОбласти

#Область Выгрузка_данных

// Выгружает Города на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьГорода(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГородаИзменения.Ссылка КАК Ссылка,
		|	ГородаИзменения.Ссылка.Наименование КАК Наименование,
		|	ГородаИзменения.Ссылка.ГеографическаяТочка.Широта КАК Широта,
		|	ГородаИзменения.Ссылка.ГеографическаяТочка.Долгота КАК Долгота
		|ИЗ
		|	Справочник.Города.Изменения КАК ГородаИзменения
		|ГДЕ
		|	ГородаИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_cities", ПараметрыВыгрузки);
	
	ТаблицаГородов = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаГородов Из ТаблицаГородов Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаГородов.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		Coord = ОбменAdvMap.ПодготовитьКоординатыКВыгрузке(?(ЗначениеЗаполнено(СтрокаГородов.Широта) Или ЗначениеЗаполнено(СтрокаГородов.Долгота), Строка(СтрокаГородов.Широта) + "," + Строка(СтрокаГородов.Долгота), ""));
		
		ДвоичныеДанныеCoord = СоздатьСообщение_Текст("coord[" + СтрНомерСтроки + "]", Coord);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеCoord);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаГородов.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки",			лОбъектыЗаписи.Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта = ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить города'; en = 'Failed to upload cities'; fr = 'Failed to upload cities'; it = 'Failed to upload cities'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаГородов Из ТаблицаГородов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаГородов.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Регионы на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьРегионы(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегионыИзменения.Ссылка КАК Ссылка,
		|	РегионыИзменения.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Регионы.Изменения КАК РегионыИзменения
		|ГДЕ
		|	РегионыИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_regions", ПараметрыВыгрузки);
	
	ТаблицаРегионов = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаРегионов Из ТаблицаРегионов Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаРегионов.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаРегионов.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных = ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки",			лОбъектыЗаписи.Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("en='Failed to upload regions';fr='Failed to upload regions';it='Failed to upload regions';ru='Не удалось выгрузить регионы'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И  СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаРегионов Из ТаблицаРегионов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаРегионов.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Административные округа и Каналы размещения на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьАдминистративныеОкруга(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АдминистративныеОкругаИзменения.Ссылка КАК Ссылка,
		|	АдминистративныеОкругаИзменения.Ссылка.Наименование КАК Наименование,
		|	АдминистративныеОкругаИзменения.Ссылка.Владелец КАК Владелец
		|ИЗ
		|	Справочник.АдминистративныеОкруга.Изменения КАК АдминистративныеОкругаИзменения
		|ГДЕ
		|	АдминистративныеОкругаИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КаналыРазмещенияИзменения.Ссылка,
		|	КаналыРазмещенияИзменения.Ссылка.Наименование,
		|	КаналыРазмещенияИзменения.Ссылка.Город
		|ИЗ
		|	Справочник.КаналыРазмещения.Изменения КАК КаналыРазмещенияИзменения
		|ГДЕ
		|	КаналыРазмещенияИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_districts", ПараметрыВыгрузки);
	
	ТаблицаАдминистратиныхОкругов = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаОкругов ИЗ ТаблицаАдминистратиныхОкругов Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		Если ТипЗнч(СтрокаОкругов.Ссылка)=Тип("СправочникСсылка.АдминистративныеОкруга") Тогда
			
			ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаОкругов.Наименование));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
			
			ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаОкругов.Ссылка.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
			
			ДвоичныеДанныеOwner = СоздатьСообщение_Текст("owner[" + СтрНомерСтроки + "]", Строка(СтрокаОкругов.Владелец.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеOwner);
			
		Иначе
			ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаОкругов.Наименование));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
			
			ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаОкругов.Ссылка.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
			
			//ДвоичныеДанныеOwner = СоздатьСообщение_Текст("owner["+СтрНомерСтроки+"]", Строка(СтрокаОкругов.Владелец.УникальныйИдентификатор()));
			//ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
			//ЗаписьДанных.Записать(ДвоичныеДанныеOwner);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных = ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить административные округа'; en = 'Failed to upload administrative districts'; fr = 'Failed to upload administrative districts'; it = 'Failed to upload administrative districts'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаОкругов Из ТаблицаАдминистратиныхОкругов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаОкругов.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Районы на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьРайоны(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",	Узел);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РайоныИзменения.Ссылка КАК Ссылка,
		|	РайоныИзменения.Ссылка.Наименование КАК Наименование,
		|	РайоныИзменения.Ссылка.Владелец КАК ГородРегион,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РайоныИзменения.Ссылка.Владелец) = ТИП(Справочник.Регионы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоРегион
		|ИЗ
		|	Справочник.Районы.Изменения КАК РайоныИзменения
		|ГДЕ
		|	РайоныИзменения.Узел = &Узел";
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	КаналыРазмещенияИзменения.Ссылка,
		//|	КаналыРазмещенияИзменения.Ссылка.Наименование,
		//|	КаналыРазмещенияИзменения.Ссылка.Город,
		//|	ЛОЖЬ
		//|ИЗ
		//|	Справочник.КаналыРазмещения.Изменения КАК КаналыРазмещенияИзменения
		//|ГДЕ
		//|	КаналыРазмещенияИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_areas", ПараметрыВыгрузки);
	
	ТаблицаРайонов = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаРайонов Из ТаблицаРайонов Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаРайонов.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаРайонов.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		Если СтрокаРайонов.ЭтоРегион Тогда
			ДвоичныеДанныеRegionUid = СоздатьСообщение_Текст("region_uid[" + СтрНомерСтроки + "]", Строка(СтрокаРайонов.ГородРегион.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеRegionUid);
			
		Иначе
			ДвоичныеДанныеCityUid = СоздатьСообщение_Текст("city_uid[" + СтрНомерСтроки + "]", Строка(СтрокаРайонов.ГородРегион.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеCityUid);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных = ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght", РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить районы'; en = 'Failed to upload districts'; fr = 'Failed to upload districts'; it = 'Failed to upload districts'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаРайонов Из ТаблицаРайонов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаРайонов.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Виды сторон на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьСтороны(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",	Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыСторонИзменения.Ссылка КАК Ссылка,
		|	ВидыСторонИзменения.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыСторон.Изменения КАК ВидыСторонИзменения
		|ГДЕ
		|	ВидыСторонИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_sides", ПараметрыВыгрузки);
	
	ТаблицаСторон = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаСторон Из ТаблицаСторон Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаСторон.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаСторон.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных = ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить стороны'; en = 'Failed to upload sides'; fr = 'Failed to upload sides'; it = 'Failed to upload sides'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаСторон Из ТаблицаСторон Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаСторон.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Размеры на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьРазмеры(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",	Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РазмерыИзменения.Ссылка КАК Ссылка,
		|	РазмерыИзменения.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Размеры.Изменения КАК РазмерыИзменения
		|ГДЕ
		|	РазмерыИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_sizes", ПараметрыВыгрузки);
	
	ТаблицаРазмеров = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаРазмеров ИЗ ТаблицаРазмеров Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаРазмеров.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаРазмеров.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных = ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить размеры'; en = 'Failed to upload sizes'; fr = 'Failed to upload sizes'; it = 'Failed to upload sizes'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаРазмеров Из ТаблицаРазмеров Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаРазмеров.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Типы рекламных блоков на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьТипы(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",	Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТипыРекламныхБлоковИзменения.Ссылка КАК Ссылка,
		|	ТипыРекламныхБлоковИзменения.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ТипыРекламныхБлоков.Изменения КАК ТипыРекламныхБлоковИзменения
		|ГДЕ
		|	ТипыРекламныхБлоковИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорииИзменения.Ссылка,
		|	КатегорииИзменения.Ссылка.Наименование
		|ИЗ
		|	Справочник.Категории.Изменения КАК КатегорииИзменения
		|ГДЕ
		|	КатегорииИзменения.Узел = &Узел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МедиапродуктыИзменения.Ссылка,
		|	МедиапродуктыИзменения.Ссылка.Наименование
		|ИЗ
		|	Справочник.Медиапродукты.Изменения КАК МедиапродуктыИзменения
		|ГДЕ
		|	МедиапродуктыИзменения.Узел = &Узел";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_types", ПараметрыВыгрузки);
	
	ТаблицаТипов = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаТипов Из ТаблицаТипов Цикл
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаТипов.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(СтрокаТипов.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить типы'; en = 'Failed to upload types'; fr = 'Failed to upload types'; it = 'Failed to upload types'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаТипов Из ТаблицаТипов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаТипов.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Выгружает Рекламные блоки на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьРекламныеБлоки(ПараметрыВыгрузки, Узел, Отказ)
	НадоОтбиратьБлоки = Ложь;
	НастройкиОтбора = ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков;
	Если НастройкиОтбора.Количество() > 0 Тогда
		НадоОтбиратьБлоки = Истина;
	КонецЕсли;
	
	ТаблицаДопустимыхБлоков = ВернутьТаблицуБлоковИзменения(ПараметрыВыгрузки, Узел, НадоОтбиратьБлоки, НастройкиОтбора);
	
	Если ТаблицаДопустимыхБлоков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивБлоков = ТаблицаДопустимыхБлоков.ВыгрузитьКолонку("РекламныйБлок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РекламныеБлокиДляОтбора",	МассивБлоков);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РекламныеБлоки.Ссылка КАК Ссылка,
		|	РекламныеБлоки.ГеографическаяМетка.Широта КАК Широта,
		|	РекламныеБлоки.ГеографическаяМетка.Долгота КАК Долгота,
		|	РекламныеБлоки.Наименование КАК Наименование,
		|	РекламныеБлоки.НомерКонструкции КАК НомерКонструкции,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.НаличиеПодсветки
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК НаличиеПодсветки,
		|	РекламныеБлоки.Размер КАК Размер,
		|	РекламныеБлоки.Сторона КАК Сторона,
		|	РекламныеБлоки.ТипБлока КАК ТипБлока,
		|	РекламныеБлоки.Район КАК Район,
		|	РекламныеБлоки.Регион КАК Регион,
		|	РекламныеБлоки.АдминистративныйОкруг КАК АдминистративныйОкруг,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.АлкогольТабак
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК Алкоголь,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.Табак
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК Табак,
		|	РекламныеБлоки.ПометкаУдаления КАК ПометкаУдаления,
		|	РекламныеБлоки.ДатаУстановки КАК ДатаУстановки,
		|	РекламныеБлоки.ДатаУдаления КАК ДатаУдаления,
		|	РекламныеБлоки.АдресРазмещения КАК АдресРазмещения,
		|	РекламныеБлоки.Категория КАК Категория,
		|	РекламныеБлоки.Медиапродукт КАК Медиапродукт,
		|	РекламныеБлоки.Владелец КАК Канал,
		|	РекламныеБлоки.ОсновноеИзображение КАК ОсновноеИзображение,
		|	РекламныеБлоки.ИзображениеНаКарте КАК ИзображениеНаКарте,
		|	РекламныеБлоки.Город КАК Город,
		|	РекламныеБлоки.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.РекламныеБлоки КАК РекламныеБлоки
		|ГДЕ
		|	РекламныеБлоки.Ссылка В(&РекламныеБлокиДляОтбора)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДопПоляДляВыгрузки = ПараметрыВыгрузки.ПоляДополнительнойИнформации.НайтиСтроки(Новый Структура("Использование", Истина));
	Если ДопПоляДляВыгрузки.Количество() > 0 Тогда
		ТаблицаСведенийПоДопПолям = ПолучитьТаблицуСведенийПоДопПолямРекламныхБлоков(ПараметрыВыгрузки.ПоляДополнительнойИнформации, МассивБлоков);
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_placements", ПараметрыВыгрузки);
	
	ТаблицаБлоков = РезультатЗапроса.Выгрузить();
	
	КоличествоВыгруженных	= 0;
	ВыгруженныеБлоки		= ТаблицаБлоков.Скопировать();
	ВыгруженныеБлоки.Очистить();
	КоличествоБлоков		= ТаблицаБлоков.Количество();
	ПорядокБлоков			= 0;
	НомерСтроки				= 1;
	Для каждого СтрокаБлоков Из ТаблицаБлоков Цикл
		Если СтрокаБлоков.ЭтоГруппа Тогда
			НоваяСтрока = ВыгруженныеБлоки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБлоков);
			Продолжить;
		КонецЕсли;
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		КоличествоВыгруженных	= КоличествоВыгруженных + 1;
		ПорядокБлоков			= ПорядокБлоков + 1;
		
		НоваяСтрока = ВыгруженныеБлоки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБлоков);
		
		Coord = ОбменAdvMap.ПодготовитьКоординатыКВыгрузке(?(ЗначениеЗаполнено(СтрокаБлоков.Широта) Или ЗначениеЗаполнено(СтрокаБлоков.Долгота),
			СокрЛП(Строка(СтрокаБлоков.Широта)) + "," + СокрЛП(Строка(СтрокаБлоков.Долгота)), ""));
		
		ДвоичныеДанныеCoords = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][coords]", Coord);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеCoords);
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][description]", СокрЛП(СтрокаБлоков.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][uid]", Строка(СтрокаБлоков.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		ДвоичныеДанныеConstruction = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][construction]", СтрокаБлоков.НомерКонструкции);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеConstruction);
		
		ДвоичныеДанныеlight = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][light]", СтрокаБлоков.НаличиеПодсветки);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеlight);
		
		ДвоичныеДанныеside = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][side_uid]", Строка(СтрокаБлоков.Сторона.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеside);
		
		ДвоичныеДанныеsize = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][size_uid]", Строка(СтрокаБлоков.Размер.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеsize);
		
		Если ПараметрыВыгрузки.ВыгружатьВместоТипаБлока Тогда
			Если      ПараметрыВыгрузки.ЗаменаТипаБлока = Перечисления.ВариантыВыгрузкиНаСайтТипаБлока.Категория Тогда
				ТипБлока = Строка(СтрокаБлоков.Категория.УникальныйИдентификатор());
			ИначеЕсли ПараметрыВыгрузки.ЗаменаТипаБлока = Перечисления.ВариантыВыгрузкиНаСайтТипаБлока.Медиапродукт Тогда
				ТипБлока = Строка(СтрокаБлоков.Медиапродукт.УникальныйИдентификатор());
			Иначе
				ТипБлока = Строка(СтрокаБлоков.ТипБлока.УникальныйИдентификатор());
			КонецЕсли;
			
		Иначе
			ТипБлока = Строка(СтрокаБлоков.ТипБлока.УникальныйИдентификатор());
			
		КонецЕсли;
		
		ДвоичныеДанныеtype = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][type_uid]", ТипБлока);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеtype);
		
		Если ПараметрыВыгрузки.ВыгружатьКаналРазмещенийВместоРайона Тогда
			АдминистративныйОкруг = Строка(СтрокаБлоков.Канал.УникальныйИдентификатор());
		Иначе
			АдминистративныйОкруг = Строка(СтрокаБлоков.АдминистративныйОкруг.УникальныйИдентификатор());
		КонецЕсли;
		
		ДвоичныеДанныеdistrict = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][district_uid]", АдминистративныйОкруг);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdistrict);
		
		ДвоичныеДанныеregion = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][region_uid]", Строка(СтрокаБлоков.Регион.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеregion);
		
		ДвоичныеДанныеcity = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][city_uid]", Строка(СтрокаБлоков.Город.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеcity);
		
		//Если ПараметрыВыгрузки.ВыгружатьКаналРазмещенийВместоРайона Тогда
		//	Район = Строка(СтрокаБлоков.Канал.УникальныйИдентификатор()); 
		//Иначе
		Район = Строка(СтрокаБлоков.Район.УникальныйИдентификатор());
		//КонецЕсли;
		
		ДвоичныеДанныеarea = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][area_uid]", Район);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеarea);
		
		ДвоичныеДанныеalco = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][alco]", СтрокаБлоков.Алкоголь);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеalco);
		
		ДвоичныеДанныеtobacco = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][tobacco]", СтрокаБлоков.Табак);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеtobacco);
		
		ДвоичныеДанныеinstalldate = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][install_date]", Формат(СтрокаБлоков.ДатаУстановки, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеinstalldate);
		
		ДвоичныеДанныеuninstalldate = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][uninstall_date]", Формат(СтрокаБлоков.ДатаУдаления, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuninstalldate);
		
		ДвоичныеДанныеaddress = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][address]", СокрЛП(СтрокаБлоков.АдресРазмещения));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеaddress);
		
		Если ДопПоляДляВыгрузки.Количество() > 0 Тогда
			Для каждого СтрокаДопПоля Из ДопПоляДляВыгрузки Цикл
				СтрокаБлока = ТаблицаСведенийПоДопПолям.НайтиСтроки(Новый Структура("РекламныйБлок", СтрокаБлоков.Ссылка));
				Если СтрокаБлока.Количество() > 0 Тогда
					ДопЗначение = СтрокаБлока[0][СтрокаДопПоля.ИмяДляЗапроса];
					
					Если Не ЗначениеЗаполнено(ДопЗначение) Тогда
						Продолжить;
					КонецЕсли;
					
					Если      Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ДопЗначение)) Тогда
						ДопЗначение = Строка(ДопЗначение.УникальныйИдентификатор());
					ИначеЕсли ТипЗнч(ДопЗначение) = Тип("Число") Тогда
						ДопЗначение = Формат(ДопЗначение, "ЧГ=0");
					КонецЕсли;
					
					ДвоичныеДанныеaДопПоле = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][" + СтрокаДопПоля.ИмяДляЗапроса + "]", ДопЗначение);
					лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
					лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеaДопПоле);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоВыгруженных > 100 Тогда
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
			лОбъектыЗаписи.ЗаписьДанных.Закрыть();
			
			ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
			РазмерДанных		= ДвоичныеДанныеТело.Размер();
			//Результат.Вставить("Заголовки", Заголовки);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
			
			ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
				НСтр("ru = 'Не удалось выгрузить рекламные места'; en = 'Failed to upload ad spaces'; fr = 'Failed to upload ad spaces'; it = 'Failed to upload ad spaces'"));
			Если ОтветСайта = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСайта);
			СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
			
			Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
				Успех = Ложь;
				
				Если ПараметрыВыгрузки.НеВыгружатьИзображения Тогда
					Успех = Истина;
				Иначе
					Успех = ВыгрузитьКартинкиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ, ВыгруженныеБлоки.ВыгрузитьКолонку("Ссылка"));
				КонецЕсли;
				
				Если Успех Тогда
					Для каждого СтрокаБлоков Из ВыгруженныеБлоки Цикл
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаБлоков.Ссылка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПорядокБлоков = КоличествоБлоков Тогда
				лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_placements", ПараметрыВыгрузки);
			КонецЕсли;
			
			КоличествоВыгруженных = 0;
			ВыгруженныеБлоки.Очистить();
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КоличествоВыгруженных > 0 Тогда
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
			НСтр("ru = 'Не удалось выгрузить рекламные места'; en = 'Failed to upload ad spaces'; fr = 'Failed to upload ad spaces'; it = 'Failed to upload ad spaces'"));
		Если ОтветСайта = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
			Успех = Ложь;
			
			Если ПараметрыВыгрузки.НеВыгружатьИзображения Тогда
				Успех = Истина;
			Иначе
				Успех = ВыгрузитьКартинкиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ, ВыгруженныеБлоки.ВыгрузитьКолонку("Ссылка"));
			КонецЕсли;
			
			Если Успех Тогда
				Для каждого СтрокаБлоков Из ВыгруженныеБлоки Цикл
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаБлоков.Ссылка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выгружает Изображения к рекламным блокам на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Функция ВыгрузитьКартинкиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ, МассивБлоков)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РекламныеБлоки",					МассивБлоков);
	Запрос.УстановитьПараметр("ВыгружатьДополнительныеФото",	ПараметрыВыгрузки.ВыгружатьДополнительныеФото);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РекламныеБлоки.Ссылка КАК РекламныйБлок,
		|	РекламныеБлоки.ОсновноеИзображение КАК ОсновноеИзображение,
		|	РекламныеБлоки.ИзображениеНаКарте КАК ИзображениеНаКарте
		|ПОМЕСТИТЬ ВТ_Картинки
		|ИЗ
		|	Справочник.РекламныеБлоки КАК РекламныеБлоки
		|ГДЕ
		|	РекламныеБлоки.Ссылка В(&РекламныеБлоки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РекламныеБлокиФотографии.Ссылка КАК РекламныйБлок,
		|	РекламныеБлокиФотографии.Фотография КАК Картинка,
		|	NULL КАК ОсновноеИзображение,
		|	NULL КАК ИзображениеНаКарте,
		|	РекламныеБлокиФотографии.Фотография.Расширение КАК КартинкаРасширение,
		|	РекламныеБлокиФотографии.Фотография.Наименование КАК КартинкаНаименование,
		|	NULL КАК ОсновноеИзображениеНаименование,
		|	NULL КАК ОсновноеИзображениеРасширение,
		|	NULL КАК ИзображениеНаКартеНаименование,
		|	NULL КАК ИзображениеНаКартеРасширение,
		|	РекламныеБлокиФотографии.НомерСтроки КАК Порядок
		|ИЗ
		|	Справочник.РекламныеБлоки.Фотографии КАК РекламныеБлокиФотографии
		|ГДЕ
		|	РекламныеБлокиФотографии.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.РекламныйБлок
		|			ИЗ
		|				ВТ_Картинки КАК Т)
		|	И НЕ РекламныеБлокиФотографии.Фотография.ПометкаУдаления
		|	И НЕ РекламныеБлокиФотографии.Фотография В
		|				(ВЫБРАТЬ
		|					Т.ОсновноеИзображение
		|				ИЗ
		|					ВТ_Картинки КАК Т)
		|	И НЕ РекламныеБлокиФотографии.Фотография В
		|				(ВЫБРАТЬ
		|					Т.ИзображениеНаКарте
		|				ИЗ
		|					ВТ_Картинки КАК Т)
		|	И &ВыгружатьДополнительныеФото
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Картинки.РекламныйБлок,
		|	NULL,
		|	ВТ_Картинки.ОсновноеИзображение,
		|	ВТ_Картинки.ИзображениеНаКарте,
		|	NULL,
		|	NULL,
		|	ВТ_Картинки.ОсновноеИзображение.Наименование,
		|	ВТ_Картинки.ОсновноеИзображение.Расширение,
		|	ВТ_Картинки.ИзображениеНаКарте.Наименование,
		|	ВТ_Картинки.ИзображениеНаКарте.Расширение,
		|	0
		|ИЗ
		|	ВТ_Картинки КАК ВТ_Картинки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ ПО
		|	РекламныйБлок";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыборкаРекламныйБлок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Успех = Истина;
	Пока ВыборкаРекламныйБлок.Следующий() Цикл
		лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_pictures_group", ПараметрыВыгрузки);
		
		НомерСтроки = 1;
		СтрНомерСтроки = Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		Выборка = ВыборкаРекламныйБлок.Выбрать();
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(ВыборкаРекламныйБлок.РекламныйБлок.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		НомерКартинки = 1;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ОсновноеИзображение) Тогда
				лПредставление = Выборка.ОсновноеИзображениеНаименование;
				Попытка
					ДвоичныеДанныеКартинка = СоздатьСообщение_Изображение("picture[" + СтрНомерСтроки + "][0]", Строка(Выборка.ОсновноеИзображениеНаименование) + "." +
						Выборка.ОсновноеИзображениеРасширение, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.ОсновноеИзображение));
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка получения изображения для выгрузки на сайт'") +
						": " + лПредставление;
					ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
					Успех = Ложь;
					Продолжить;
				КонецПопытки;
				лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
				лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеКартинка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ИзображениеНаКарте) Тогда
				лПредставление = Выборка.ИзображениеНаКартеНаименование;
				Попытка
					ДвоичныеДанныеКартинка = СоздатьСообщение_Изображение("picture[" + СтрНомерСтроки + "][-1]", Строка(Выборка.ИзображениеНаКартеНаименование) + "." +
						Выборка.ИзображениеНаКартеРасширение, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.ИзображениеНаКарте));
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка получения изображения для выгрузки на сайт'") +
						": " + лПредставление;
					ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
					Успех = Ложь;
					Продолжить;
				КонецПопытки;
				лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
				лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеКартинка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Картинка) Тогда
				лПредставление = Выборка.КартинкаНаименование;
				Попытка
					ДвоичныеДанныеКартинка = СоздатьСообщение_Изображение("picture[" + СтрНомерСтроки + "][" + Формат(НомерКартинки, "ЧН=0; ЧГ=") + "]", Строка(Выборка.КартинкаНаименование) + "." +
						Выборка.КартинкаРасширение, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Картинка));
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка получения изображения для выгрузки на сайт'") +
						": " + лПредставление;
					ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
					Успех = Ложь;
					Продолжить;
				КонецПопытки;
				лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
				лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеКартинка);
				
				НомерКартинки = НомерКартинки + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
			НСтр("ru = 'Не удалось выгрузить картинки для рекламного места '; en = 'Failed to upload images for ad spaces '; fr = 'Failed to upload images for ad spaces '; it = 'Failed to upload images for ad spaces '"));
		Если ОтветСайта = Неопределено Тогда
			Успех = Ложь;
			Возврат Успех;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
			// Все нормально
		Иначе
			ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выгрузить картинки для рекламного места '; en = 'Failed to upload images for ad spaces '; fr = 'Failed to upload images for ad spaces '; it = 'Failed to upload images for ad spaces '") +
				ВыборкаРекламныйБлок.РекламныйБлок + ". " + ОтветСайта;
			ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
			Успех = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Успех;
КонецФункции

// Запускает процедуры выгрузки Занятостей и Цен рекламных блоков на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьЦеныИЗанятостиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ)
	КоличествоМесяцевДляВыгрузки = ПараметрыВыгрузки.КоличествоМесяцевДляВыгрузки;
	
	OnDate 			= ТекущаяДата();
	ВыгружатьПоДням	= ПараметрыВыгрузки.ВыгружатьПоДням;
	ВыгружатьПоНеделям = Ложь;
	НачПериода 		= НачалоМесяца(OnDate);
	
	Если КоличествоМесяцевДляВыгрузки = 0 Тогда
		КонПериода = КонецМесяца(ДобавитьМесяц(НачПериода, 5));
	Иначе
		КонПериода = КонецМесяца(ДобавитьМесяц(НачПериода, КоличествоМесяцевДляВыгрузки));
	КонецЕсли;
	
	Попытка
		ТаблицаРазмещений = ПолучитьТаблицуЗанятости(ПараметрыВыгрузки, ВыгружатьПоДням, ВыгружатьПоНеделям, НачПериода, КонПериода, Узел);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при получении таблицы занятости'") +
			ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Если ТаблицаРазмещений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыгрузитьЦеныРекламныхБлоков(ПараметрыВыгрузки, ТаблицаРазмещений, Узел, Отказ);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при выгрузке цен'") +
			ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		ВыгрузитьЗанятостиРекламныхБлоков(ПараметрыВыгрузки, ТаблицаРазмещений, Узел, Отказ);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при выгрузке занятости'") +
			ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстСообщения);
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Выгружает Цены рекламных блоков на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьЦеныРекламныхБлоков(ПараметрыВыгрузки, ТаблицаРазмещений, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРазмещений", ТаблицаРазмещений);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРазмещений.РекламныйБлок КАК РекламныйБлок,
		|	ТаблицаРазмещений.НачалоПериода КАК НачалоПериода,
		|	ТаблицаРазмещений.Цена КАК Цена,
		|	ТаблицаРазмещений.ЦенаАгента КАК ЦенаАгента
		|ПОМЕСТИТЬ ВТ_ТаблицаРазмещений
		|ИЗ
		|	&ТаблицаРазмещений КАК ТаблицаРазмещений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТаблицаРазмещений.РекламныйБлок КАК РекламныйБлок,
		|	ВТ_ТаблицаРазмещений.НачалоПериода КАК НачалоПериода,
		|	ВТ_ТаблицаРазмещений.Цена КАК Цена,
		|	ВТ_ТаблицаРазмещений.ЦенаАгента КАК ЦенаАгента
		|ИЗ
		|	ВТ_ТаблицаРазмещений КАК ВТ_ТаблицаРазмещений
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода
		|ИТОГИ ПО
		|	РекламныйБлок";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_prices", ПараметрыВыгрузки);
	
	ВыборкаРекламныйБлок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоВыгруженныхОбъектов = 0;
	КоличествоБлоков = ТаблицаРазмещений.Количество();
	НомерБлока = 0;
	
	НомерСтроки = 1;
	НомерЗаписи = 1;
	Пока ВыборкаРекламныйБлок.Следующий() Цикл
		Выборка = ВыборкаРекламныйБлок.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			КоличествоВыгруженныхОбъектов = КоличествоВыгруженныхОбъектов + 1;
			НомерБлока = НомерБлока + 1;
			СтрНомерЗаписи	= Формат(НомерЗаписи, "ЧН=0; ЧГ=");
			
			ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid[" + СтрНомерЗаписи + "]", Строка(ВыборкаРекламныйБлок.РекламныйБлок.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
			
			ДвоичныеДанныеmonth = СоздатьСообщение_Текст("month[" + СтрНомерЗаписи + "]", Формат(НачалоМесяца(Выборка.НачалоПериода), "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеmonth);
			
			ДвоичныеДанныеprice = СоздатьСообщение_Текст("price[" + СтрНомерЗаписи + "]", Формат(Выборка.Цена, "ЧН=0; ЧГ=0"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеprice);
			
			ДвоичныеДанныеpriceagent= СоздатьСообщение_Текст("price_agent[" + СтрНомерЗаписи + "]", Формат(Выборка.ЦенаАгента, "ЧГ=0"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеpriceagent);
			
			НомерЗаписи = НомерЗаписи + 1;
		КонецЦикла;
		
		Если КоличествоВыгруженныхОбъектов > 500 Тогда
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
			лОбъектыЗаписи.ЗаписьДанных.Закрыть();
			
			ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
			РазмерДанных		= ДвоичныеДанныеТело.Размер();
			//Результат.Вставить("Заголовки", Заголовки);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
			
			ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
				НСтр("ru = 'Не удалось выгрузить цены рекламных мест'; en = 'Failed to upload ad spaces prices'; fr = 'Failed to upload ad spaces prices'; it = 'Failed to upload ad spaces prices'"));
			Если ОтветСайта = Неопределено Тогда
				//Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСайта);
			СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
			
			Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
				// Все нормально
			Иначе
				ТекстНеУспешногоСообщения = НСтр("ru = 'Не все цены рекламных мест удалось выгрузить. Некоторые поверхности отсутствуют на сайте.'; en = 'Not all ad spaces prices were uploaded. Some advertising spaces are missing on the website.'; fr = 'Not all ad spaces prices were uploaded. Some advertising spaces are missing on the website.'; it = 'Non tutti i prezzi degli spazi pubblicitari sono stati caricati. Alcuni spazi pubblicitari sono assenti sul sito.'") +
					". " + ОтветСайта;
				ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
			КонецЕсли;
			
			Если Не НомерБлока = КоличествоБлоков Тогда
				лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_prices", ПараметрыВыгрузки);
			КонецЕсли;
			КоличествоВыгруженныхОбъектов = 0;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КоличествоВыгруженныхОбъектов > 0 Тогда
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
			НСтр("ru = 'Не удалось выгрузить цены рекламных мест'; en = 'Failed to upload ad spaces prices'; fr = 'Failed to upload ad spaces prices'; it = 'Failed to upload ad spaces prices'"));
		Если ОтветСайта = Неопределено Тогда
			//Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
			// Все нормально
		Иначе
			//Отказ = Истина;
			ТекстНеУспешногоСообщения = НСтр("ru = 'Не все цены рекламных мест удалось выгрузить. Некоторые поверхности отсутствуют на сайте.'; en = 'Not all ad spaces prices were uploaded. Some advertising spaces are missing on the website.'; fr = 'Not all ad spaces prices were uploaded. Some advertising spaces are missing on the website.'; it = 'Non tutti i prezzi degli spazi pubblicitari sono stati caricati. Alcuni spazi pubblicitari sono assenti sul sito.'") +
				". " + ОтветСайта;
			ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выгружает Занятости рекламных блоков на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьЗанятостиРекламныхБлоков(ПараметрыВыгрузки, ТаблицаРазмещений, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРазмещений",	ТаблицаРазмещений);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРазмещений.РекламныйБлок КАК РекламныйБлок,
		|	ТаблицаРазмещений.НачалоПериода КАК НачалоПериода,
		|	ТаблицаРазмещений.Состояние КАК Состояние
		|ПОМЕСТИТЬ ВТ_ТаблицаРазмещений
		|ИЗ
		|	&ТаблицаРазмещений КАК ТаблицаРазмещений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТаблицаРазмещений.РекламныйБлок КАК РекламныйБлок,
		|	ВТ_ТаблицаРазмещений.НачалоПериода КАК НачалоПериода,
		|	ВТ_ТаблицаРазмещений.Состояние КАК Состояние
		|ИЗ
		|	ВТ_ТаблицаРазмещений КАК ВТ_ТаблицаРазмещений
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода
		|ИТОГИ ПО
		|	РекламныйБлок";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_busy", ПараметрыВыгрузки);
	
	ВыборкаРекламныйБлок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерСтроки = 1;
	НомерЗаписи = 1;
	
	КоличествоВыгруженныхОбъектов = 0;
	КоличествоБлоков = ТаблицаРазмещений.Количество();
	НомерБлока = 0;
	
	Пока ВыборкаРекламныйБлок.Следующий() Цикл
		Выборка = ВыборкаРекламныйБлок.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоВыгруженныхОбъектов = КоличествоВыгруженныхОбъектов + 1;
			НомерБлока = НомерБлока + 1;
			СтрНомерЗаписи	= Формат(НомерЗаписи, "ЧН=0; ЧГ=");
			
			ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid[" + СтрНомерЗаписи + "]", Строка(ВыборкаРекламныйБлок.РекламныйБлок.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
			
			ДвоичныеДанныеmonth = СоздатьСообщение_Текст("month[" + СтрНомерЗаписи + "]", Формат(НачалоМесяца(Выборка.НачалоПериода), "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеmonth);
			
			ДвоичныеДанныеstate = СоздатьСообщение_Текст("state[" + СтрНомерЗаписи + "]", Формат(Выборка.Состояние, "ЧН=0; ЧГ=0"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеstate);
			
			НомерЗаписи = НомерЗаписи + 1;
		КонецЦикла;
		
		Если КоличествоВыгруженныхОбъектов > 500 Тогда
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
			лОбъектыЗаписи.ЗаписьДанных.Закрыть();
			
			ДвоичныеДанныеТело = лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
			РазмерДанных		= ДвоичныеДанныеТело.Размер();
			//Результат.Вставить("Заголовки", Заголовки);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
			
			ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
				НСтр("ru = 'Не удалось выгрузить состояния рекламных мест'; en = 'Failed to upload ad spaces statuses'; fr = 'Failed to upload ad spaces statuses'; it = 'Failed to upload ad spaces statuses'"));
			Если ОтветСайта = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСайта);
			СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
			
			Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
				// Все нормально
			Иначе
				ТекстНеУспешногоСообщения = НСтр("ru = 'Не все состояния рекламных мест удалось выгрузить. Некоторые поверхности отсутствуют на сайте'; en = 'Not all ad spaces statuses were uploaded. Some advertising spaces are missing on the website'; fr = 'Not all ad spaces statuses were uploaded. Some advertising spaces are missing on the website'; it = 'Non tutti gli stati degli spazi pubblicitari sono stati caricati. Alcuni spazi pubblicitari sono assenti sul sito'") +
					". " + ОтветСайта;
				ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
			КонецЕсли;
			
			Если Не НомерБлока = КоличествоБлоков Тогда
				лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_busy", ПараметрыВыгрузки);
			КонецЕсли;
			КоличествоВыгруженныхОбъектов = 0;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КоличествоВыгруженныхОбъектов > 0 Тогда
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
			НСтр("ru = 'Не удалось выгрузить состояния рекламных мест'; en = 'Failed to upload ad spaces statuses'; fr = 'Failed to upload ad spaces statuses'; it = 'Failed to upload ad spaces statuses'"));
		Если ОтветСайта = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
			// Все нормально
		Иначе
			Отказ = Истина;
			ТекстНеУспешногоСообщения = НСтр("ru = 'Не все состояния рекламных мест удалось выгрузить. Некоторые поверхности отсутствуют на сайте.'; en = 'Not all ad spaces statuses were uploaded. Some advertising spaces are missing on the website.'; fr = 'Not all ad spaces statuses were uploaded. Some advertising spaces are missing on the website.'; it = 'Non tutti gli stati degli spazi pubblicitari sono stati caricati. Alcuni spazi pubblicitari sono assenti sul sito.'") +
				". " + ОтветСайта;
			ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выгружает Пользователей на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьПользователей(ПараметрыВыгрузки, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",			Узел);
	Запрос.УстановитьПараметр("ТипЦен",			ПараметрыВыгрузки.ТипЦеныПродажиАгентамЧерезWeb);
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетныеЗаписиИнтернетПользователейИзменения.Логин КАК Логин
		|ПОМЕСТИТЬ ВТ_УчетныеЗаписи
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиИнтернетПользователей.Изменения КАК УчетныеЗаписиИнтернетПользователейИзменения
		|ГДЕ
		|	УчетныеЗаписиИнтернетПользователейИзменения.Узел = &Узел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиИнтернетПользователей.Логин КАК Логин,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель КАК Покупатель,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель.Наименование КАК ПокупательНаименование,
		|	УчетныеЗаписиИнтернетПользователей.Пароль КАК Пароль,
		|	УчетныеЗаписиИнтернетПользователей.ЭлПочта КАК ЭлПочта,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель.Агентство КАК Агентство
		|ПОМЕСТИТЬ ВТ_Покупатели
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиИнтернетПользователей КАК УчетныеЗаписиИнтернетПользователей
		|ГДЕ
		|	УчетныеЗаписиИнтернетПользователей.Логин В
		|			(ВЫБРАТЬ
		|				Т.Логин
		|			ИЗ
		|				ВТ_УчетныеЗаписи КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Покупатели.Логин КАК Логин,
		|	ВТ_Покупатели.Покупатель КАК Покупатель,
		|	ВТ_Покупатели.ПокупательНаименование КАК ПокупательНаименование,
		|	ВТ_Покупатели.Пароль КАК Пароль,
		|	ВТ_Покупатели.ЭлПочта КАК ЭлПочта,
		|	ВТ_Покупатели.Агентство КАК Агентство,
		|	ВЫБОР
		|		КОГДА ВТ_Покупатели.Агентство
		|			ТОГДА ЕСТЬNULL(УстановленныеСкидкиИНаценкиСрезПоследних.ПроцентСкидкиНаценки, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Процент
		|ИЗ
		|	ВТ_Покупатели КАК ВТ_Покупатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановленныеСкидкиИНаценки.СрезПоследних(
		|				&ТекущаяДата,
		|				ПартнерПолучатель В
		|						(ВЫБРАТЬ
		|							Т.Покупатель
		|						ИЗ
		|							ВТ_Покупатели КАК Т)
		|					И ТипЦен = &ТипЦен) КАК УстановленныеСкидкиИНаценкиСрезПоследних
		|		ПО ВТ_Покупатели.Покупатель = УстановленныеСкидкиИНаценкиСрезПоследних.ПартнерПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_УчетныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Покупатели";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_users", ПараметрыВыгрузки);
	
	ТаблицаПользователей = РезультатЗапроса.Выгрузить();
	
	НомерСтроки = 1;
	Для каждого СтрокаПользователей Из ТаблицаПользователей Цикл
		СтрНомерСтроки	= Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеlogin = СоздатьСообщение_Текст("c_login[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.Логин));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеlogin);
		
		ДвоичныеДанныеname = СоздатьСообщение_Текст("c_name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.ПокупательНаименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеname);
		
		ДвоичныеДанныеpass = СоздатьСообщение_Текст("c_pass[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.Пароль));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеpass);
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("c_uid[" + СтрНомерСтроки + "]", Строка(СтрокаПользователей.Покупатель.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеemail = СоздатьСообщение_Текст("email[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.ЭлПочта));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеemail);
		
		ДвоичныеДанныеactive = СоздатьСообщение_Текст("active[" + СтрНомерСтроки + "]", "on");
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеactive);
		
		ДвоичныеДанныеdiscount = СоздатьСообщение_Текст("discount[" + СтрНомерСтроки + "]", Формат(СтрокаПользователей.Процент, "ЧГ=0"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdiscount);
		
		ДвоичныеДанныеagent = СоздатьСообщение_Текст("is_agent[" + СтрНомерСтроки + "]", Формат(СтрокаПользователей.Агентство, "БЛ=off; БИ=on"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеagent);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить учетные записи пользователей'; en = 'Failed to upload user accounts'; fr = 'Failed to upload user accounts'; it = 'Failed to upload user accounts'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		Для каждого СтрокаПользователей Из ТаблицаПользователей Цикл
			НаборЗаписей = РегистрыСведений.УчетныеЗаписиИнтернетПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Логин.Установить(СтрокаПользователей.Логин);
			Планыобмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		КонецЦикла;
	Иначе
		Отказ = Истина;
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выгрузить учетные записи пользователей'; en = 'Failed to upload user accounts'; fr = 'Failed to upload user accounts'; it = 'Failed to upload user accounts'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
	КонецЕсли;
КонецПроцедуры

// Запускает процедуры выгрузки Заказов и Фотоотчетов на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ВыгрузитьФотоотчетыИЗаказы(ПараметрыВыгрузки, Узел, Отказ)
	Если Не ПараметрыВыгрузки.ВыгружатьФотоотчеты Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.Справочники.НарядНаМонтажныеРаботыПрисоединенныеФайлы);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел",	Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлыИзменения.Ссылка КАК ФотоНаряда
		|ИЗ
		|	Справочник.НарядНаМонтажныеРаботыПрисоединенныеФайлы.Изменения КАК НарядНаМонтажныеРаботыПрисоединенныеФайлыИзменения
		|ГДЕ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлыИзменения.Узел = &Узел";
	МассивФотоотчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФотоНаряда");
	
	Если МассивФотоотчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыВыгружены = Ложь;
	ЗаказыВыгружены = ВыгрузитьЗаказы(ПараметрыВыгрузки, МассивФотоотчетов, Узел, Отказ);
	
	ФотоотчетыВыгружены = Ложь;
	ФотоотчетыВыгружены = ВыгрузитьФотоотчеты(ПараметрыВыгрузки, МассивФотоотчетов, Узел, Отказ);
	
	Если ФотоотчетыВыгружены И ЗаказыВыгружены Тогда
		Для каждого Фотоотчет Из МассивФотоотчетов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Фотоотчет);
		КонецЦикла;
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Выгружает Фотоотчеты на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Функция ВыгрузитьФотоотчеты(ПараметрыВыгрузки, МассивФотоотчетов, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Фотоотчеты",	МассивФотоотчетов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Заказ КАК Заказ,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.РекламныйБлок КАК РекламныйБлок,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.ДатаВыполненияНаряда КАК ДатаВыполненияНаряда,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Наименование КАК Наименование,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Заказ.НомерЭлектронногоДокумента КАК НомерЗаказаНаСайте,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Описание КАК Описание,
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.НарядНаМонтажныеРаботыПрисоединенныеФайлы КАК НарядНаМонтажныеРаботыПрисоединенныеФайлы
		|ГДЕ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Ссылка В(&Фотоотчеты)
		|	И НарядНаМонтажныеРаботыПрисоединенныеФайлы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_photoreports", ПараметрыВыгрузки);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		СтрНомерСтроки	= Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		Дата = Формат(?(ЗначениеЗаполнено(Выборка.ДатаВыполненияНаряда), Выборка.ДатаВыполненияНаряда, ТекущаяДата()), "ДФ=yyyy-MM-dd");
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеorderuid = СоздатьСообщение_Текст("order_uid[" + СтрНомерСтроки + "]", Строка(Выборка.Заказ.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеorderuid);
		
		ДвоичныеДанныеplacementuid = СоздатьСообщение_Текст("placement_uid[" + СтрНомерСтроки + "]", Строка(Выборка.РекламныйБлок.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеplacementuid);
		
		ДвоичныеДанныеdate = СоздатьСообщение_Текст("date[" + СтрНомерСтроки + "]", Дата);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate);
		
		ДвоичныеДанныеdescription = СоздатьСообщение_Текст("description[" + СтрНомерСтроки + "]", Выборка.Наименование + " к заказу № " + СокрЛП(Выборка.НомерЗаказаНаСайте) + " " + СокрЛП(Выборка.Описание));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdescription);
		
		ДвоичныеДанныеКартинка = СоздатьСообщение_Изображение("photo[" + СтрНомерСтроки + "]", Строка(Выборка.Наименование) + "." + Выборка.Расширение, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеКартинка);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить фотоотчеты'; en = 'Failed to upload photo reports'; fr = 'Échec du téléchargement des espaces publicitaires'; de = 'Fotoberichte konnten nicht hochgeladen werden'; it = 'Failed to upload photo reports'"));
	Если ОтветСайта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
	Иначе
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выгрузить фотоотчеты'; en = 'Failed to upload photo reports'; fr = 'Échec du téléchargement des espaces publicitaires'; de = 'Fotoberichte konnten nicht hochgeladen werden'; it = 'Failed to upload photo reports'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Выгружает Заказы на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Функция ВыгрузитьЗаказы(ПараметрыВыгрузки, МассивФотоотчетов, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Фотоотчеты",	МассивФотоотчетов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Справочник.НарядНаМонтажныеРаботыПрисоединенныеФайлы КАК НарядНаМонтажныеРаботыПрисоединенныеФайлы
		|ГДЕ
		|	НарядНаМонтажныеРаботыПрисоединенныеФайлы.Ссылка В(&Фотоотчеты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Партнер КАК Партнер,
		|	ЗаказПокупателя.НомерЭлектронногоДокумента КАК НомерЭлектронногоДокумента,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.ДатаНачала КАК ДатаНачала,
		|	ЗаказПокупателя.ДатаОкончания КАК ДатаОкончания,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.Реклама.(
		|		ДатаНачала КАК ДатаНачалаРазмещения,
		|		ДатаОкончания КАК ДатаОкончанияРазмещения,
		|		Цена КАК Цена,
		|		РекламныйБлок КАК РекламныйБлок,
		|		КлючСтроки КАК КлючСтроки
		|	) КАК Реклама,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРаботе)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРезерве)
		|			ТОГДА ""3""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НаУтверждении)
		|			ТОГДА ""8""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отклонен)
		|			ТОГДА ""9""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Утвержден)
		|			ТОГДА ""4""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Завершен)
		|			ТОГДА ""5""
		|	КОНЕЦ КАК Статус,
		|	ЗаказПокупателя.Номер КАК Номер
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.Заказ
		|			ИЗ
		|				ВТ_Заказы КАК Т)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_types", ПараметрыВыгрузки);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеc_uid = СоздатьСообщение_Текст("c_uid", Строка(Выборка.Партнер.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеc_uid);
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеnumber = СоздатьСообщение_Текст("number", СокрЛП(Выборка.Номер));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеnumber);
		
		ДвоичныеДанныеdate = СоздатьСообщение_Текст("date", Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate);
		
		ДвоичныеДанныеdate_from = СоздатьСообщение_Текст("date_from", Формат(Выборка.ДатаНачала, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_from);
		
		ДвоичныеДанныеdate_to = СоздатьСообщение_Текст("date_to", Формат(Выборка.ДатаОкончания, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_to);
		
		ДвоичныеДанныеcomment = СоздатьСообщение_Текст("comment", СокрЛП(Выборка.Комментарий));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеcomment);
		
		ДвоичныеДанныеstate = СоздатьСообщение_Текст("state", Выборка.Статус);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеstate);
		
		ВыборкаРеклама = Выборка.Реклама.Выбрать();
		Пока ВыборкаРеклама.Следующий() Цикл
			СтрКлючСтроки = Формат(ВыборкаРеклама.КлючСтроки, "ЧН=0; ЧГ=");
			
			ДвоичныеДанныеuid = СоздатьСообщение_Текст("placement[" + СтрКлючСтроки + "][uid]", Строка(ВыборкаРеклама.РекламныйБлок.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
			
			ДвоичныеДанныеdate_from = СоздатьСообщение_Текст("placement[" + СтрКлючСтроки + "][date_from]", Формат(ВыборкаРеклама.ДатаНачалаРазмещения, "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_from);
			
			ДвоичныеДанныеdate_to = СоздатьСообщение_Текст("placement[" + СтрКлючСтроки + "][date_to]", Формат(ВыборкаРеклама.ДатаОкончанияРазмещения, "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_to);
			
			ДвоичныеДанныеprice = СоздатьСообщение_Текст("placement[" + СтрКлючСтроки + "][price]", Формат(ВыборкаРеклама.Цена, "ЧГ=0"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеprice);
		КонецЦикла;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить заказы'; en = 'Failed to upload orders'; fr = 'Failed to upload orders'; it = 'Failed to upload orders'"));
	Если ОтветСайта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("ERRORS") Тогда
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выгрузить заказы'; en = 'Failed to upload orders'; fr = 'Failed to upload orders'; it = 'Failed to upload orders'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		Возврат Ложь;
	ИначеЕсли СтруктураОтвета.Свойство("Result") Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Выгружает Пользователей на сайт
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Функция ВыгрузитьПользователя(Партнер, Логин, Пароль, ПараметрыВыгрузки, Узел) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",		Партнер);
	Запрос.УстановитьПараметр("ТипЦен",			ПараметрыВыгрузки.ТипЦеныПродажиАгентамЧерезWeb);
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетныеЗаписиИнтернетПользователей.Логин КАК Логин,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель КАК Покупатель,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель.Наименование КАК ПокупательНаименование,
		|	УчетныеЗаписиИнтернетПользователей.Пароль КАК Пароль,
		|	УчетныеЗаписиИнтернетПользователей.ЭлПочта КАК ЭлПочта,
		|	УчетныеЗаписиИнтернетПользователей.Покупатель.Агентство КАК Агентство
		|ПОМЕСТИТЬ ВТ_Покупатели
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиИнтернетПользователей КАК УчетныеЗаписиИнтернетПользователей
		|ГДЕ
		|	УчетныеЗаписиИнтернетПользователей.Покупатель = &Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Покупатели.Логин КАК Логин,
		|	ВТ_Покупатели.Покупатель КАК Покупатель,
		|	ВТ_Покупатели.ПокупательНаименование КАК ПокупательНаименование,
		|	ВТ_Покупатели.Пароль КАК Пароль,
		|	ВТ_Покупатели.ЭлПочта КАК ЭлПочта,
		|	ВТ_Покупатели.Агентство КАК Агентство,
		|	ВЫБОР
		|		КОГДА ВТ_Покупатели.Агентство
		|			ТОГДА ЕСТЬNULL(УстановленныеСкидкиИНаценкиСрезПоследних.ПроцентСкидкиНаценки, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Процент
		|ИЗ
		|	ВТ_Покупатели КАК ВТ_Покупатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановленныеСкидкиИНаценки.СрезПоследних(
		|				&ТекущаяДата,
		|				ПартнерПолучатель В
		|						(ВЫБРАТЬ
		|							Т.Покупатель
		|						ИЗ
		|							ВТ_Покупатели КАК Т)
		|					И ТипЦен = &ТипЦен) КАК УстановленныеСкидкиИНаценкиСрезПоследних
		|		ПО ВТ_Покупатели.Покупатель = УстановленныеСкидкиИНаценкиСрезПоследних.ПартнерПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Покупатели";
	РезультатЗапроса = Запрос.Выполнить();
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_types", ПараметрыВыгрузки);
	
	ТаблицаПользователей = РезультатЗапроса.Выгрузить();
	Если ТаблицаПользователей.Количество() = 0 Тогда
		ЛогинКлиента	= СокрЛП(Партнер.Код);
		ПарольКлиента	= ПользователиКлиентСервер.СгенерироватьПароль();
		МассивПочты		= ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(Партнер);
		ЭлПочта			= ?(МассивПочты.Количество() > 0, МассивПочты[0].АдресЭП, "");
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.УчетныеЗаписиИнтернетПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Логин      = ЛогинКлиента;
		МенеджерЗаписи.Пароль     = ПарольКлиента;
		МенеджерЗаписи.ЭлПочта    = ЭлПочта;
		МенеджерЗаписи.Покупатель = Партнер;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Логин					= ЛогинКлиента;
		НоваяСтрока.ПокупательНаименование	= Партнер.Наименование;
		НоваяСтрока.Пароль					= ПарольКлиента;
		НоваяСтрока.Покупатель				= Партнер;
		НоваяСтрока.Процент					= 0;
		НоваяСтрока.Агентство				= Ложь;
	КонецЕсли;
	
	НомерСтроки = 1;
	Для каждого СтрокаПользователей Из ТаблицаПользователей Цикл
		СтрНомерСтроки	= Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеlogin = СоздатьСообщение_Текст("c_login[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.Логин));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеlogin);
		
		ДвоичныеДанныеname = СоздатьСообщение_Текст("c_name[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.ПокупательНаименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеname);
		
		ДвоичныеДанныеpass = СоздатьСообщение_Текст("c_pass[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.Пароль));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеpass);
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("c_uid[" + СтрНомерСтроки + "]", Строка(СтрокаПользователей.Покупатель.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеemail = СоздатьСообщение_Текст("email[" + СтрНомерСтроки + "]", СокрЛП(СтрокаПользователей.ЭлПочта));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеemail);
		
		ДвоичныеДанныеactive = СоздатьСообщение_Текст("active[" + СтрНомерСтроки + "]", "on");
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеactive);
		
		ДвоичныеДанныеdiscount = СоздатьСообщение_Текст("discount[" + СтрНомерСтроки + "]", Формат(СтрокаПользователей.Процент, "ЧГ=0"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdiscount);
		
		ДвоичныеДанныеagent = СоздатьСообщение_Текст("is_agent[" + СтрНомерСтроки + "]", Формат(СтрокаПользователей.Агентство, "БЛ=off; БИ=on"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеagent);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выгрузить учетные записи пользователя'; en = 'Failed to upload user account'; fr = 'Failed to upload user account'; it = 'Failed to upload user account'"));
	Если ОтветСайта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выгружен = Истина;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		// Все нормально
	Иначе
		Выгружен = Ложь;
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выгрузить учетные записи пользователя'; en = 'Failed to upload user account'; fr = 'Failed to upload user account'; it = 'Failed to upload user account'") +
			". " + ОтветСайта;
		//ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНеУспешногоСообщения);
	КонецЕсли;
	
	Возврат Выгружен;
КонецФункции

Процедура ЗагрузитьДанныеПоРекламнымБлокам(МассивБлоков, ПараметрыВыгрузки, Узел)
	Если МассивБлоков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РекламныеБлокиДляОтбора",	МассивБлоков);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РекламныеБлоки.Ссылка КАК Ссылка,
		|	РекламныеБлоки.ГеографическаяМетка.Широта КАК Широта,
		|	РекламныеБлоки.ГеографическаяМетка.Долгота КАК Долгота,
		|	РекламныеБлоки.Наименование КАК Наименование,
		|	РекламныеБлоки.НомерКонструкции КАК НомерКонструкции,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.НаличиеПодсветки
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК НаличиеПодсветки,
		|	РекламныеБлоки.Размер КАК Размер,
		|	РекламныеБлоки.Сторона КАК Сторона,
		|	РекламныеБлоки.ТипБлока КАК ТипБлока,
		|	РекламныеБлоки.Район КАК Район,
		|	РекламныеБлоки.Регион КАК Регион,
		|	РекламныеБлоки.АдминистративныйОкруг КАК АдминистративныйОкруг,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.АлкогольТабак
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК Алкоголь,
		|	ВЫБОР
		|		КОГДА РекламныеБлоки.Табак
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК Табак,
		|	РекламныеБлоки.ПометкаУдаления КАК ПометкаУдаления,
		|	РекламныеБлоки.ДатаУстановки КАК ДатаУстановки,
		|	РекламныеБлоки.ДатаУдаления КАК ДатаУдаления,
		|	РекламныеБлоки.АдресРазмещения КАК АдресРазмещения,
		|	РекламныеБлоки.Категория КАК Категория,
		|	РекламныеБлоки.Медиапродукт КАК Медиапродукт,
		|	РекламныеБлоки.Владелец КАК Канал,
		|	РекламныеБлоки.ОсновноеИзображение КАК ОсновноеИзображение,
		|	РекламныеБлоки.ИзображениеНаКарте КАК ИзображениеНаКарте,
		|	РекламныеБлоки.Город КАК Город,
		|	РекламныеБлоки.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.РекламныеБлоки КАК РекламныеБлоки
		|ГДЕ
		|	РекламныеБлоки.Ссылка В(&РекламныеБлокиДляОтбора)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДопПоляДляВыгрузки = ПараметрыВыгрузки.ПоляДополнительнойИнформации.НайтиСтроки(Новый Структура("Использование", Истина));
	Если ДопПоляДляВыгрузки.Количество() > 0 Тогда
		ТаблицаСведенийПоДопПолям = ПолучитьТаблицуСведенийПоДопПолямРекламныхБлоков(ПараметрыВыгрузки.ПоляДополнительнойИнформации, МассивБлоков);
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_placements", ПараметрыВыгрузки);
	
	ТаблицаБлоков = РезультатЗапроса.Выгрузить();
	
	КоличествоВыгруженных = 0;
	ВыгруженныеБлоки = ТаблицаБлоков.Скопировать();
	ВыгруженныеБлоки.Очистить();
	КоличествоБлоков = ТаблицаБлоков.Количество();
	ПорядокБлоков = 0;
	
	НомерСтроки = 1;
	Для каждого СтрокаБлоков ИЗ ТаблицаБлоков Цикл
		
		Если СтрокаБлоков.ЭтоГруппа Тогда
			НоваяСтрока = ВыгруженныеБлоки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБлоков);
			Продолжить;
		КонецЕсли;
		
		КоличествоВыгруженных = КоличествоВыгруженных + 1;
		ПорядокБлоков = ПорядокБлоков + 1;
		НоваяСтрока = ВыгруженныеБлоки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБлоков);
		СтрНомерСтроки	= Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		Coord = ОбменAdvMap.ПодготовитьКоординатыКВыгрузке(?(ЗначениеЗаполнено(СтрокаБлоков.Широта) Или ЗначениеЗаполнено(СтрокаБлоков.Долгота),
			СокрЛП(Строка(СтрокаБлоков.Широта)) + "," + СокрЛП(Строка(СтрокаБлоков.Долгота)), ""));
		
		ДвоичныеДанныеCoords = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][coords]", Coord);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеCoords);
		
		ДвоичныеДанныеName = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][description]", СокрЛП(СтрокаБлоков.Наименование));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеName);
		
		ДвоичныеДанныеUid = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][uid]", Строка(СтрокаБлоков.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUid);
		
		ДвоичныеДанныеConstruction = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][construction]", СтрокаБлоков.НомерКонструкции);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеConstruction);
		
		ДвоичныеДанныеlight = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][light]", СтрокаБлоков.НаличиеПодсветки);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеlight);
		
		ДвоичныеДанныеside = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][side_uid]", Строка(СтрокаБлоков.Сторона.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеside);
		
		ДвоичныеДанныеsize = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][size_uid]", Строка(СтрокаБлоков.Размер.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеsize);
		
		Если ПараметрыВыгрузки.ВыгружатьВместоТипаБлока Тогда
			Если ПараметрыВыгрузки.ЗаменаТипаБлока = Перечисления.ВариантыВыгрузкиНаСайтТипаБлока.Категория Тогда
				ТипБлока = Строка(СтрокаБлоков.Категория.УникальныйИдентификатор()); 
			ИначеЕсли ПараметрыВыгрузки.ЗаменаТипаБлока = Перечисления.ВариантыВыгрузкиНаСайтТипаБлока.Медиапродукт Тогда
				ТипБлока = Строка(СтрокаБлоков.Медиапродукт.УникальныйИдентификатор());	
			Иначе
				ТипБлока = Строка(СтрокаБлоков.ТипБлока.УникальныйИдентификатор());
			КонецЕсли;
			
		Иначе
			ТипБлока = Строка(СтрокаБлоков.ТипБлока.УникальныйИдентификатор())
			
		КонецЕсли;
		
		ДвоичныеДанныеtype = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][type_uid]", ТипБлока);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеtype);
		
		Если ПараметрыВыгрузки.ВыгружатьКаналРазмещенийВместоРайона Тогда
			АдминистративныйОкруг = Строка(СтрокаБлоков.Канал.УникальныйИдентификатор()); 
		Иначе
			АдминистративныйОкруг = Строка(СтрокаБлоков.АдминистративныйОкруг.УникальныйИдентификатор());	
		КонецЕсли;
		
		ДвоичныеДанныеdistrict = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][district_uid]",АдминистративныйОкруг);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdistrict);
		
		ДвоичныеДанныеregion = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][region_uid]", Строка(СтрокаБлоков.Регион.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеregion);
		
		ДвоичныеДанныеcity = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][city_uid]", Строка(СтрокаБлоков.Город.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеcity);
		
		//Если ПараметрыВыгрузки.ВыгружатьКаналРазмещенийВместоРайона Тогда
		//	Район = Строка(СтрокаБлоков.Канал.УникальныйИдентификатор()); 
		//Иначе
		Район = Строка(СтрокаБлоков.Район.УникальныйИдентификатор());	
		//КонецЕсли;
		
		ДвоичныеДанныеarea = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][area_uid]", Район);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеarea);
		
		ДвоичныеДанныеalco = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][alco]", СтрокаБлоков.Алкоголь);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеalco);
		
		ДвоичныеДанныеtobacco = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][tobacco]", СтрокаБлоков.Табак);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеtobacco);
		
		ДвоичныеДанныеinstalldate = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][install_date]", Формат(СтрокаБлоков.ДатаУстановки, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеinstalldate);
		
		ДвоичныеДанныеuninstalldate = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][uninstall_date]", Формат(СтрокаБлоков.ДатаУдаления, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuninstalldate);
		
		ДвоичныеДанныеaddress = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][address]", СокрЛП(СтрокаБлоков.АдресРазмещения));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеaddress);
		
		Если ДопПоляДляВыгрузки.Количество() > 0 Тогда
			Для Каждого СтрокаДопПоля из ДопПоляДляВыгрузки Цикл
				СтрокаБлока = ТаблицаСведенийПоДопПолям.НайтиСтроки(Новый Структура("РекламныйБлок", СтрокаБлоков.Ссылка));
				Если СтрокаБлока.Количество() <> 0 Тогда
					
					ДопЗначение = СтрокаБлока[0][СтрокаДопПоля.ИмяДляЗапроса];
					
					Если Не ЗначениеЗаполнено(ДопЗначение) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Справочники.ТипВсеСсылки().СодержитТип(ТИПЗнч(ДопЗначение)) Тогда
						ДопЗначение = Строка(ДопЗначение.УникальныйИдентификатор());
					ИначеЕсли ТИПЗнч(ДопЗначение) = ТИП("Число") Тогда
						ДопЗначение = Формат(ДопЗначение, "ЧГ=0");
					КонецЕсли;
					
					ДвоичныеДанныеaДопПоле = СоздатьСообщение_Текст("placement[" + СтрНомерСтроки + "][" + СтрокаДопПоля.ИмяДляЗапроса + "]", ДопЗначение);
					лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
					лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеaДопПоле);
				КонецЕсли;
			КонецЦикла;			  
		КонецЕсли;
		
		Если КоличествоВыгруженных > 100 Тогда
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
			лОбъектыЗаписи.ЗаписьДанных.Закрыть();
			
			ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
			РазмерДанных		= ДвоичныеДанныеТело.Размер();
			//Результат.Вставить("Заголовки", Заголовки);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
			
			ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело);
			Если ОтветСайта = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветСайта);
			СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
			Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
				Успех = Ложь;
				Если ПараметрыВыгрузки.НеВыгружатьИзображения Тогда 	
					Успех = Истина;	
				Иначе
					Успех = ВыгрузитьКартинкиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ, ВыгруженныеБлоки.ВыгрузитьКолонку("Ссылка"));	
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПорядокБлоков = КоличествоБлоков Тогда
				лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_placements", ПараметрыВыгрузки);
			КонецЕсли;
			
			КоличествоВыгруженных = 0;
			ВыгруженныеБлоки.Очистить();
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КоличествоВыгруженных > 0 Тогда
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело);
		Если ОтветСайта = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		Если СтруктураОтвета.Свойство("Result") И  СтруктураОтвета.Result = "OK" Тогда
			Успех = Ложь;
			Если ПараметрыВыгрузки.НеВыгружатьИзображения Тогда 	
				Успех = Истина;	
			Иначе
				Успех = ВыгрузитьКартинкиРекламныхБлоков(ПараметрыВыгрузки, Узел, Отказ, ВыгруженныеБлоки.ВыгрузитьКолонку("Ссылка"));	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСтатусыЗаказов(ПараметрыВыгрузки, МассивЗаказов, Узел, Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказов",	МассивЗаказов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРаботе)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРезерве)
		|			ТОГДА ""3""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НаУтверждении)
		|			ТОГДА ""8""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отклонен)
		|			ТОГДА ""9""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Утвержден)
		|			ТОГДА ""4""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Завершен)
		|			ТОГДА ""5""
		|	КОНЕЦ КАК Статус,
		|	ЗаказПокупателя.НомерЭлектронногоДокумента КАК НомерЭлектронногоДокумента
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В (&МассивЗаказов)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("change_order_state", ПараметрыВыгрузки);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		СтрНомерСтроки	= Формат(НомерСтроки, "ЧН=0; ЧГ=");
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid[" + СтрНомерСтроки + "]", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеstate = СоздатьСообщение_Текст("state[" + СтрНомерСтроки + "]", Выборка.Статус);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеstate);
		
		ДвоичныеДанныеid = СоздатьСообщение_Текст("id[" + СтрНомерСтроки + "]", СокрЛП(Выборка.НомерЭлектронногоДокумента));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеid);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось изменить статусы заказов'; en = 'Failed to edit orders statuses'; fr = 'Failed to edit orders statuses'; it = 'Failed to edit orders statuses'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	Если СтруктураОтвета.Свойство("Result") Тогда
		// Все нормально
	Иначе
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось изменить статусы заказов'; en = 'Failed to edit orders statuses'; fr = 'Failed to edit orders statuses'; it = 'Failed to edit orders statuses'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Запрашивает у сайта "Пересчет" фильтров
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Процедура ПересчетФильтров(ПараметрыВыгрузки, Узел, Отказ)
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("set_filters", ПараметрыВыгрузки);
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело,
		НСтр("ru = 'Не удалось выполнить пересчет фильтров'; en = 'Failed to recalculate filters'; fr = 'Failed to recalculate filters'; it = 'Failed to recalculate filters'"));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСайта);
	СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("Result") И СтруктураОтвета.Result = "OK" Тогда
		ТекстУспешногоСообщения = НСтр("ru = 'Пересчет фильтров выполнен'; en = 'Filters recalculation completed'; fr = 'Filters recalculation completed'; it = 'Filters recalculation completed'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Информация, Узел.Метаданные(), Узел, ТекстУспешногоСообщения);
	Иначе
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не удалось выполнить пересчет фильтров'; en = 'Failed to recalculate filters'; fr = 'Failed to recalculate filters'; it = 'Failed to recalculate filters'") +
			". " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Отправка данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ТекстНеУспешногоСообщения);	
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСсылкуНаКартуСайта(ТаблицаКоординат, ПоляДополнительнойИнформации, ТаблицаВыходов, Узел) Экспорт
	ПараметрыВыгрузки = СформироватьПараметры(Узел);
	Если ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Ложь Тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
	
	ВыгружатьПолныйОтчет = Константы.ВыгружатьПолныйВидОтчетаРекламныеВозможности.Получить();
	ТаблицаКоординат.Свернуть("РекламныйБлок");
	
	uid = Новый УникальныйИдентификатор;
	date = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	
	СписокДопПолей = Новый СписокЗначений();
	СтруктураДопПолей = Новый Структура();
	
	Для Каждого СтрокаДопПоля из ПоляДополнительнойИнформации Цикл
		Если СтрокаДопПоля.Использование Тогда
			Если Не СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СсылкаНаКартуРекламногоБлока Тогда
				СписокДопПолей.Добавить("ДопПоле" + СтрокаДопПоля.НомерСтроки, СтрокаДопПоля.ИмяДопПоля);
				СтруктураДопПолей.Вставить("ДопПоле" + СтрокаДопПоля.НомерСтроки, СтрокаДопПоля.ИмяДопПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_report", ПараметрыВыгрузки);
	ВыгружатьПолныйОтчет = Ложь;
	ДвоичныеДанныеДатаОтчета = СоздатьСообщение_Текст("date",СокрЛП(date));
	ДвоичныеДанныеUIDОтчета = СоздатьСообщение_Текст("uid",СокрЛП(uid));
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеUIDОтчета);
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеДатаОтчета);
	
	Если ВыгружатьПолныйОтчет Тогда
		Для А = 0 По СписокДопПолей.Количество() - 1 Цикл
			ДвоичныеДанныеИмяДопКолонки = СоздатьСообщение_Текст("field[" + Строка(А + 1) + "][name]", СписокДопПолей[А].Значение);
			ДвоичныеДанныеЗаголовокДопКолонки = СоздатьСообщение_Текст("field[" + Строка(А + 1) + "][label]", СписокДопПолей[А].Представление);
			СсылкаНаДопПоле = СтруктураДопПолей[СписокДопПолей[А].Значение];
			ДвоичныеДанныеТипДопКолонки = СоздатьСообщение_Текст("field[" + Строка(А + 1) + "][type]",
				КодироватьСтроку(ВернутьТипЗначенияДопПоля(СсылкаНаДопПоле), СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8));
			
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеИмяДопКолонки);
			
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеЗаголовокДопКолонки);
			
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеТипДопКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаКоординат Цикл
		ДвоичныеДанныеУИДБлока = СоздатьСообщение_Текст("placement[" + (ТаблицаКоординат.Индекс(СтрокаТЧ) + 1) + "][uid]", Строка(СтрокаТЧ.РекламныйБлок.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеУИДБлока);
		
		СтрокаОтчетаПоБлоку = ТаблицаВыходов.Найти(СтрокаТЧ.РекламныйБлок, "РекламныйБлок");
		
		Если ВыгружатьПолныйОтчет Тогда
			СтрокаОтчетаПоБлоку = ТаблицаВыходов.Найти(СтрокаТЧ.РекламныйБлок, "РекламныйБлок");
			Если Не СтрокаОтчетаПоБлоку = Неопределено Тогда
				Для А = 0 По СписокДопПолей.Количество() - 1 Цикл
					ДвоичныеДанныеИмяЗначениеКолонки = СоздатьСообщение_Текст("placement[" +(ТаблицаКоординат.Индекс(СтрокаТЧ) + 1) + "][" + СписокДопПолей[А].Значение + "]",
						Строка(СтрокаОтчетаПоБлоку[СписокДопПолей[А].Значение]));
					лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
					лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеИмяЗначениеКолонки);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
		лОбъектыЗаписи.ЗаписьДанных.Закрыть();
		
		ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
		РазмерДанных		= ДвоичныеДанныеТело.Размер();
		//Результат.Вставить("Заголовки", Заголовки);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
		
		HTTPОтвет	= ВыполнитьHTTPЗапросОтвет(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело);
		Если HTTPОтвет = Неопределено Тогда
			Отказ = Истина;
			Возврат "";
		КонецЕсли;
		ОтветСайта	= HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось подключиться к сайту!'; en = 'Failed to connect to site!'; fr = 'Impossible de se connecter au site!'; de = 'Verbindung zum Server konnte nicht hergestellt werden site!'; it = 'Failed to connect to site!'"));
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Если Найти(ОтветСайта, "RESULT") > 0 Тогда
		Если Найти(ОтветСайта, "ABSENT") > 0 Тогда
			ЗагрузитьДанныеПоРекламнымБлокам(ТаблицаКоординат.ВыгрузитьКолонку("РекламныйБлок"), ПараметрыВыгрузки, Узел);
		КонецЕсли;
		ХэшЗаказа = Сред(ОтветСайта, Найти(ОтветСайта, "RESULT") + 9, 32);
		Возврат ПараметрыВыгрузки.Протокол + ПараметрыВыгрузки.АдресСайта + "/report/?LINK=" + ХэшЗаказа;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось загрузить данные отчета на сайт. Ответ сайта - '; en = 'The report data could not be uploaded to the site. The response from the website -'; fr = 'Impossible de charger les données de rapport sur le site. Réponse du site -'; de = 'Berichtsdaten können nicht auf die Website hochgeladen werden. Antwort Website - '; it = 'The report data could not be uploaded to the site. The response from the website -'") +
				ОтветСайта);
	КонецЕсли;
КонецФункции

Функция ПолучитьСсылкуНаКартуПоЗаказу(Заказ, Узел) Экспорт
	лРезультат = Новый Структура("СсылкаНаКарту, ХЭШ_Заказа", "", "");
	
	ПараметрыВыгрузки = СформироватьПараметры(Узел);
	Если ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Ложь Тогда
		Отказ = Истина;
		Возврат лРезультат;
	КонецЕсли;
	
	Выгружен = ВыгрузитьПользователя(Заказ.Партнер, ПараметрыВыгрузки.ИмяПользователя, ПараметрыВыгрузки.Пароль, ПараметрыВыгрузки, Узел);
	
	Если Не Выгружен Тогда
		Возврат лРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",	Заказ);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Партнер КАК Партнер,
		|	ЗаказПокупателя.НомерЭлектронногоДокумента КАК НомерЭлектронногоДокумента,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.ДатаНачала КАК ДатаНачала,
		|	ЗаказПокупателя.ДатаОкончания КАК ДатаОкончания,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.Реклама.(
		|		ДатаНачала КАК ДатаНачалаРазмещения,
		|		ДатаОкончания КАК ДатаОкончанияРазмещения,
		|		Цена КАК Цена,
		|		РекламныйБлок КАК РекламныйБлок,
		|		КлючСтроки КАК КлючСтроки
		|	) КАК Реклама,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Новый)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРаботе)
		|			ТОГДА ""2""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.ВРезерве)
		|			ТОГДА ""3""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НаУтверждении)
		|			ТОГДА ""8""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Отклонен)
		|			ТОГДА ""9""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Утвержден)
		|			ТОГДА ""4""
		|		КОГДА ЗаказПокупателя.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Завершен)
		|			ТОГДА ""5""
		|	КОНЕЦ КАК Статус,
		|	ЗаказПокупателя.Номер КАК Номер
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Заказ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	лОбъектыЗаписи = СоздатьОбъектыЗаписиДанных("load_order", ПараметрыВыгрузки);
	
	Выборка = РезультатЗапроса.Выбрать();
	МассивБлоков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеc_uid = СоздатьСообщение_Текст("c_uid", Строка(Выборка.Партнер.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеc_uid);	
		
		ДвоичныеДанныеuid = СоздатьСообщение_Текст("uid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
		
		ДвоичныеДанныеnumber = СоздатьСообщение_Текст("number", СокрЛП(Выборка.Номер));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеnumber);
		
		ДвоичныеДанныеdate = СоздатьСообщение_Текст("date", Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate);
		
		ДвоичныеДанныеdate_from = СоздатьСообщение_Текст("date_from", Формат(Выборка.ДатаНачала, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_from);
		
		ДвоичныеДанныеdate_to = СоздатьСообщение_Текст("date_to", Формат(Выборка.ДатаОкончания, "ДФ=yyyy-MM-dd"));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_to);
		
		ДвоичныеДанныеcomment = СоздатьСообщение_Текст("comment", СокрЛП(Выборка.Комментарий));
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеcomment);
		
		ДвоичныеДанныеstate = СоздатьСообщение_Текст("state", Выборка.Статус);
		лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
		лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеstate);
		
		ВыборкаРеклама = Выборка.Реклама.Выбрать();
		Пока ВыборкаРеклама.Следующий() Цикл
			
			МассивБлоков.Добавить(ВыборкаРеклама.РекламныйБлок);
			
			ДвоичныеДанныеuid = СоздатьСообщение_Текст("placement["+ВыборкаРеклама.КлючСтроки+"][uid]", Строка(ВыборкаРеклама.РекламныйБлок.УникальныйИдентификатор()));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеuid);
			
			ДвоичныеДанныеdate_from = СоздатьСообщение_Текст("placement["+ВыборкаРеклама.КлючСтроки+"][date_from]", Формат(ВыборкаРеклама.ДатаНачалаРазмещения, "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_from);
			
			ДвоичныеДанныеdate_to = СоздатьСообщение_Текст("placement["+ВыборкаРеклама.КлючСтроки+"][date_to]", Формат(ВыборкаРеклама.ДатаОкончанияРазмещения, "ДФ=yyyy-MM-dd"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеdate_to);
			
			ДвоичныеДанныеprice = СоздатьСообщение_Текст("placement["+ВыборкаРеклама.КлючСтроки+"][price]", Формат(ВыборкаРеклама.Цена, "ЧГ=0"));
			лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель);
			лОбъектыЗаписи.ЗаписьДанных.Записать(ДвоичныеДанныеprice);
		КонецЦикла;
	КонецЦикла;
	
	лОбъектыЗаписи.ЗаписьДанных.ЗаписатьСтроку("--" + лОбъектыЗаписи.Разделитель + "--");
	лОбъектыЗаписи.ЗаписьДанных.Закрыть();
	
	ДвоичныеДанныеТело	= лОбъектыЗаписи.ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерДанных		= ДвоичныеДанныеТело.Размер();
	//Результат.Вставить("Заголовки", Заголовки);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Type",	"multipart/form-data; boundary=" + лОбъектыЗаписи.Разделитель);
	лОбъектыЗаписи.Заголовки.Вставить("Content-Lenght",	РазмерДанных);
	
	HTTPОтвет	= ВыполнитьHTTPЗапросОтвет(ПараметрыВыгрузки, "/api/", лОбъектыЗаписи.Заголовки, ДвоичныеДанныеТело);
	Если HTTPОтвет = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если Найти(ОтветСайта,"RESULT") > 0 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСайта);
		СтруктураОтвета = ПрочитатьJson(ЧтениеJSON);
		
		ХэшЗаказа = СтруктураОтвета.Result;
		лРезультат.ХЭШ_Заказа = ХэшЗаказа;
		Если Найти(ОтветСайта,"ABSENT") > 0 Тогда
			ЗагрузитьДанныеПоРекламнымБлокам(МассивБлоков, ПараметрыВыгрузки, Узел);
		КонецЕсли;                             
		
		лРезультат.СсылкаНаКарту = ПараметрыВыгрузки.Протокол + ПараметрыВыгрузки.АдресСайта + "/orders/" + ХэшЗаказа;
		Возврат лРезультат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Не удалось загрузить данные заказа на сайт. Ответ сайта'; en = 'The order data could not be uploaded to the site. The response from the website'; fr = 'Impossible de charger les détails de la commande sur le site. Réponse du site'; de = 'Die Bestelldaten können nicht auf die Website hochgeladen werden. Antwort Website'; it = 'The order data could not be uploaded to the site. The response from the website'") +
		" - " + ОтветСайта;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Сервисные

// Подготавливает объекты для создания сообщения двоичными данными
//
// Параметры:
//  пДействие  - Строка - имя действия
//  пПараметрыВыгрузки  - Структура - общие параметры обмена
//
// Возвращаемое значение:
//   Структура   - подготовленные объекты
//
Функция СоздатьОбъектыЗаписиДанных(пДействие, пПараметрыВыгрузки)
	ДвоичныеДанныеДействие 	= СоздатьСообщение_Текст("action",	пДействие);
	ДвоичныеДанныеЛогин		= СоздатьСообщение_Текст("login",	СокрЛП(пПараметрыВыгрузки.ИмяПользователя));
	ДвоичныеДанныеПароль 	= СоздатьСообщение_Текст("pass",	СокрЛП(пПараметрыВыгрузки.Пароль));
	
	Разделитель		= СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Заголовки		= Новый Соответствие();
	ПотокТело		= Новый ПотокВПамяти();
	ЗаписьДанных	= Новый ЗаписьДанных(ПотокТело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ДвоичныеДанныеДействие);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ДвоичныеДанныеЛогин);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ДвоичныеДанныеПароль);
	
	Возврат Новый Структура("Разделитель, ПотокТело, ЗаписьДанных, Заголовки",
		Разделитель, ПотокТело, ЗаписьДанных, Заголовки);
КонецФункции

Функция СоздатьСообщение_Текст(ИмяСообщения, ДвоичныеДанныеТекст)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения);
	//ЗаписьДанных.ЗаписатьСтроку("Content-Type: text/plain");
	ЗаписьДанных.ЗаписатьСтроку("");
	
	// Тело.
	ЗаписьДанных.ЗаписатьСтроку(ДвоичныеДанныеТекст);
	
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Функция СоздатьСообщение_Изображение(ИмяСообщения, ИмяФайла, Картинка)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения + "; filename=" + ИмяФайла);
	//ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/jpeg");
	ЗаписьДанных.ЗаписатьСтроку("");
	
	// Тело.
	ЗаписьДанных.Записать(картинка);
	ЗаписьДанных.ЗаписатьСтроку("");
	
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Процедура ПеревестиДатуВЗапрос(НДата, День, Месяц, Год)
	Символовсего	= СтрДлина(НДата);
	Позиция			= Найти(НДата, ".");
	День			= Лев(НДата, Позиция - 1);
	НДата			= Прав(НДата, Символовсего - Позиция);
	Позиция			= Найти(НДата, ".");
	Символовсего	= СтрДлина(НДата);
	Месяц			= Лев(НДата, Позиция - 1);
	Год				= Прав(НДата, Символовсего - Позиция);
КонецПроцедуры

Функция ВернутьТипЗначенияДопПоля(ДопПоле)
	Если ДопПоле.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СвойствоРекламногоБлока 
			Или ДопПоле.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СвойствоУчреждения Тогда
		Если ДопПоле.ЗначениеИсточникаДанных.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			Возврат "text";
			
		ИначеЕсли   ДопПоле.ЗначениеИсточникаДанных.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Возврат "numeric";
			
		ИначеЕсли   ДопПоле.ЗначениеИсточникаДанных.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			Возврат "date";
			
		Иначе	
			Возврат "catalog";
		КонецЕсли; 
		
	ИначеЕсли	ДопПоле.ВидИсточникаДанных=Перечисления.ИсточникиДанныхПолейДополнительноИнформации.РеквизитРекламногоБлока Тогда
		Если СтрНайти(НРег(Строка(ДопПоле.ЗначениеИсточникаДанных)), "номер") > 0 Или СтрНайти(НРег(Строка(ДопПоле.ЗначениеИсточникаДанных)), "адрес") > 0 Тогда
			Возврат "text";
			
		ИначеЕсли СтрНайти(НРег(Строка(ДопПоле.ЗначениеИсточникаДанных)), "дата") > 0 Тогда
			Возврат "date";
			
		Иначе
			Возврат "catalog";
		КонецЕсли;
		
	ИначеЕсли ДопПоле.ВидИсточникаДанных=Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаМонтажныхРабот
			Или ДопПоле.ВидИсточникаДанных=Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаРазмещения
			Или ДопПоле.ВидИсточникаДанных=Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаПечатиРИМ Тогда
		Возврат "numeric";
		
	КонецЕсли;
	
	Возврат "text";
КонецФункции

// Формирует структуру с данными для выполнения обмена
//
// Параметры:
//  УзелИнформационнойБазы  - ПланОбменаСсылка.ОбменССайтом - обрабатываемый узел Плана обмена
//
// Возвращаемое значение:
//   Структура   - подготовленные параметры
//
Функция СформироватьПараметры(УзелИнформационнойБазы, ЗапускатьПроверкуСоединения = Истина) Экспорт
	ПараметрыВыгрузки = Новый Структура("АдресСайта, ВыгружатьВместоТипаБлока, ВыгружатьКаналРазмещенийВместоРайона, ВыгружатьДополнительныеФото, ВыгружатьНаСайт, Комментарий,
		|ВыгружатьНаСайт, ВыгружатьПоДням, ВыгружатьРайонВместоАдминистративногоОкруга, ВыгружатьФотоотчеты, ГрафикОплатыПокупателейДляПродажиЧерезWEB, ОтборПоЗанятостиРекламныхБлоков,
		|ДатаНачалаВыгрузкиДокументов, ЗаменаТипаБлока, ИспользоватьОтборПоОрганизациям, КоличествоМесяцевДляВыгрузки, НеВыгружатьИзображения, ПоляДополнительнойИнформации, ЗначенияМножественногоОтбора,
		|Организация, Ответственный, Подразделение, СтатусРазмещенийПриЗагрузкеСWEB, ТипЦеныПродажиАгентамЧерезWeb, ТипЦеныПродажиЧерезWeb, ЧислоДнейВРезервеПриЗагрузкеСWEB, ИмяПользователя, Пароль,
		|Защищенное, ПроверкаПравильностиАвторизации, Протокол");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбменССайтом.АдресСайта КАК АдресСайта,
		|	ОбменССайтом.ВыгружатьВместоТипаБлока КАК ВыгружатьВместоТипаБлока,
		|	ОбменССайтом.ВыгружатьДополнительныеФото КАК ВыгружатьДополнительныеФото,
		|	ОбменССайтом.ВыгружатьКаналРазмещенийВместоРайона КАК ВыгружатьКаналРазмещенийВместоРайона,
		|	ОбменССайтом.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
		|	ОбменССайтом.ВыгружатьПоДням КАК ВыгружатьПоДням,
		|	ОбменССайтом.ВыгружатьРайонВместоАдминистративногоОкруга КАК ВыгружатьРайонВместоАдминистративногоОкруга,
		|	ОбменССайтом.ВыгружатьФотоотчеты КАК ВыгружатьФотоотчеты,
		|	ОбменССайтом.ГрафикОплатыПокупателейДляПродажиЧерезWEB КАК ГрафикОплатыПокупателейДляПродажиЧерезWEB,
		|	ОбменССайтом.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов,
		|	ОбменССайтом.ЗаменаТипаБлока КАК ЗаменаТипаБлока,
		|	ОбменССайтом.ИспользоватьОтборПоОрганизациям КАК ИспользоватьОтборПоОрганизациям,
		|	ОбменССайтом.КоличествоМесяцевДляВыгрузки КАК КоличествоМесяцевДляВыгрузки,
		|	ОбменССайтом.НеВыгружатьИзображения КАК НеВыгружатьИзображения,
		|	ОбменССайтом.Организация КАК Организация,
		|	ОбменССайтом.Ответственный КАК Ответственный,
		|	ОбменССайтом.Подразделение КАК Подразделение,
		|	ОбменССайтом.СтатусРазмещенийПриЗагрузкеСWEB КАК СтатусРазмещенийПриЗагрузкеСWEB,
		|	ОбменССайтом.ТипЦеныПродажиАгентамЧерезWeb КАК ТипЦеныПродажиАгентамЧерезWeb,
		|	ОбменССайтом.ТипЦеныПродажиЧерезWeb КАК ТипЦеныПродажиЧерезWeb,
		|	ОбменССайтом.ЧислоДнейВРезервеПриЗагрузкеСWEB КАК ЧислоДнейВРезервеПриЗагрузкеСWEB,
		|	ОбменССайтом.ИмяПользователя КАК ИмяПользователя,
		|	ОбменССайтом.Пароль КАК Пароль,
		|	ОбменССайтом.ПоляДополнительнойИнформации.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		ИмяДопПоля КАК ИмяДопПоля,
		|		Использование КАК Использование,
		|		Представление КАК Представление,
		|		Закреплена КАК Закреплена,
		|		ИмяДляЗапроса КАК ИмяДляЗапроса
		|	) КАК ПоляДополнительнойИнформации,
		|	ОбменССайтом.ОтборПоЗанятостиРекламныхБлоков.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Значение КАК Значение,
		|		ВидСравнения КАК ВидСравнения,
		|		ПутьКданным КАК ПутьКданным,
		|		ИмяДляЗапроса КАК ИмяДляЗапроса
		|	) КАК ОтборПоЗанятостиРекламныхБлоков,
		|	ОбменССайтом.ЗначенияМножественногоОтбора.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Значение КАК Значение,
		|		ПутьКданным КАК ПутьКданным,
		|		ИмяДляЗапроса КАК ИмяДляЗапроса,
		|		ВидСравнения КАК ВидСравнения
		|	) КАК ЗначенияМножественногоОтбора,
		|	ОбменССайтом.Комментарий КАК Комментарий
		|ИЗ
		|	ПланОбмена.ОбменССайтом КАК ОбменССайтом
		|ГДЕ
		|	ОбменССайтом.Ссылка = &УзелИнформационнойБазы";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВыгрузки, Выборка);
		
		ПараметрыВыгрузки.ПоляДополнительнойИнформации		= Выборка.ПоляДополнительнойИнформации.Выгрузить();
		ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков	= Выборка.ОтборПоЗанятостиРекламныхБлоков.Выгрузить();
		ПараметрыВыгрузки.ЗначенияМножественногоОтбора		= Выборка.ЗначенияМножественногоОтбора.Выгрузить();
	КонецЕсли;
	
	ПараметрыВыгрузки.Защищенное	= Ложь;
	ПараметрыВыгрузки.Протокол		= "";
	Если Лев(ПараметрыВыгрузки.АдресСайта, 5) = "https" Тогда
		ВсегоСимволов = СтрДлина(ПараметрыВыгрузки.АдресСайта);
		ПараметрыВыгрузки.АдресСайта	= Прав(ПараметрыВыгрузки.АдресСайта, ВсегоСимволов - 8);
		ПараметрыВыгрузки.Защищенное	= Истина;
		ПараметрыВыгрузки.Протокол		= "https://";
	ИначеЕсли Лев(ПараметрыВыгрузки.АдресСайта, 4) = "http" Тогда
		ВсегоСимволов = СтрДлина(ПараметрыВыгрузки.АдресСайта);
		ПараметрыВыгрузки.АдресСайта	= Прав(ПараметрыВыгрузки.АдресСайта, ВсегоСимволов - 7);
		ПараметрыВыгрузки.Протокол		= "http://";
	КонецЕсли;
	
	Если Прав(ПараметрыВыгрузки.АдресСайта, 1) = "/" Тогда
		ВсегоСимволов = СтрДлина(ПараметрыВыгрузки.АдресСайта);
		ПараметрыВыгрузки.АдресСайта = Лев(ПараметрыВыгрузки.АдресСайта, ВсегоСимволов - 1);
	КонецЕсли;
	
	ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Ложь;
	
	Если Не(ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПользователя) И ЗначениеЗаполнено(ПараметрыВыгрузки.Пароль)) Тогда
		ТекстНеУспешногоСообщения = НСтр("ru = 'Не указан логин и пароль'; en = 'Login and password not specified'; fr = 'Login and password not specified'; it = 'Login and password not specified'") + ". ";
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ТекстНеУспешногоСообщения);
	Иначе
		Отказ = Ложь;
		Если ЗапускатьПроверкуСоединения Тогда
			Если ПроверитьПравильностьЛогинИПароль(ПараметрыВыгрузки, УзелИнформационнойБазы, Отказ) Тогда
				ПараметрыВыгрузки.ПроверкаПравильностиАвторизации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
КонецФункции

// Проверяет правильность параметров подключения к сайту
//
// Параметры:
//  ПараметрыВыгрузки  - Структура - общие параметры обмена
//  Узел  - ПланОбменаСсылка - ссылка на узел плана обмена
//  Отказ  - Булево - флаг завершения выгрузки
//
Функция ПроверитьПравильностьЛогинИПароль(ПараметрыВыгрузки, Узел, Отказ) Экспорт
	
	ОтветСайта	= ВыполнитьHTTPЗапросТело(ПараметрыВыгрузки, "/api/?action=test&login=" + СокрЛП(ПараметрыВыгрузки.ИмяПользователя) + "&pass=" + СокрЛП(ПараметрыВыгрузки.Пароль));
	Если ОтветСайта = Неопределено Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если Найти(ОтветСайта, "ERROR") > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось подключиться к серверу!'; en = 'Failed to connect to server!'; fr = 'Impossible de se connecter au serveur!'; de = 'Verbindung zum Server konnte nicht hergestellt werden!'; it = 'Failed to connect to server!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ТекстСообщения = НСтр("ru = 'При подключении к сайту в ответе есть информация об ошибке:'") + " " + ОтветСайта;
		ЗаписьЖурналаРегистрации("Обмен данными.ОбменССайтом.Получение данных", УровеньЖурналаРегистрации.Ошибка, Узел.Метаданные(), Узел, ОписаниеОшибки());
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Работа_с_файлами_логов

// Возвращает список данных о файлах логов
//
// Параметры:
//  пТестирование  - Строка - Каталог, в котором проводить поиск файлов. Используется для тестирования функционала
//
// Возвращаемое значение:
//   Массив   - данные о файлах логов
//
Функция ПолучитьСписокФайловЛогов(пТестирование = Неопределено) Экспорт
	лСписокФайлов = Новый Массив;
	// В случае тестирования двоичные данные записываем в специальную папку
	лПуть = ?(ЗначениеЗаполнено(пТестирование), пТестирование, КаталогВременныхФайлов() + "ДанныеСайта\");
	лФайлНаДиске = Новый Файл(лПуть);
	Если Не лФайлНаДиске.Существует() Тогда
		Возврат лСписокФайлов;
	КонецЕсли;
	
	#Область Файлы_данных
	лФайлыВПапке = НайтиФайлы(лПуть, "*.Site_data");
	Для каждого лФайлНаДиске Из лФайлыВПапке Цикл
		лИмяФайла = лФайлНаДиске.ИмяБезРасширения;
		лТекЭлемент = Новый Структура("ИмяФайла, ДатаФайла, Данные, Команда",
			лИмяФайла, лФайлНаДиске.ПолучитьВремяИзменения(), Истина, "");
		лСписокФайлов.Добавить(лТекЭлемент);
	КонецЦикла;
	#КонецОбласти
	
	#Область Файлы_Команд
	лФайлыВПапке = НайтиФайлы(лПуть, "*.Site_url");
	Для каждого лФайлНаДиске Из лФайлыВПапке Цикл
		лИмяФайла = лФайлНаДиске.ИмяБезРасширения;
		лТекЭлемент = Неопределено;
		Для каждого лФайлРезультат Из лСписокФайлов Цикл
			Если лФайлРезультат.ИмяФайла = лИмяФайла Тогда
				лТекЭлемент = лФайлРезультат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если лТекЭлемент = Неопределено Тогда
			лТекЭлемент = Новый Структура("ИмяФайла, ДатаФайла, Данные, Команда",
				лИмяФайла, лФайлНаДиске.ПолучитьВремяИзменения(), Ложь, "");
			лСписокФайлов.Добавить(лТекЭлемент);
		КонецЕсли;
		
		// Прочитаем содержимое файла
		лТекст = Новый ЧтениеТекста(лФайлНаДиске.ПолноеИмя, КодировкаТекста.Системная);
		лТекЭлемент.Команда = лТекст.ПрочитатьСтроку();
	КонецЦикла;
	#КонецОбласти
	
	Возврат лСписокФайлов;
КонецФункции

// Получить файлы логов
//
// Параметры:
//  пИменаФайлов  - Массив - имена файла для выгрузки
//  пУникальныйИдентификатор  - Уникальный идентификатор формы
//
// Возвращаемое значение:
//   Массив   - адреса во временном хранилище
//
Функция ПолучитьДанныеФайловЛогов(пИменаФайлов, пУникальныйИдентификатор) Экспорт
	лРезультат = Новый Массив;
	лПуть = КаталогВременныхФайлов() + "ДанныеСайта\";
//лПуть = "D:\Proxima\_Logs\";
	Для каждого лЭлемент Из пИменаФайлов Цикл
		лИмя = лПуть + лЭлемент + ".Site_data";
		лФайл = Новый Файл(лИмя);
		Если лФайл.Существует() Тогда
			лРезультат.Добавить(Новый Структура("ИмяФайла, АдресВХранилище",
				лФайл.Имя, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(лИмя), пУникальныйИдентификатор)));
		КонецЕсли;
		
		лИмя = лПуть + лЭлемент + ".Site_url";
		лФайл = Новый Файл(лИмя);
		Если лФайл.Существует() Тогда
			лРезультат.Добавить(Новый Структура("ИмяФайла, АдресВХранилище",
				лФайл.Имя, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(лИмя), пУникальныйИдентификатор)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат лРезультат;
КонецФункции

// Удаляет файлы логов с сервера
//
// Параметры:
//  пИменаФайлов  - Массив - имена файла для выгрузки
//
Процедура УдалитьФайлыЛогов(пИменаФайлов) Экспорт
	лПуть = КаталогВременныхФайлов() + "ДанныеСайта\";
//лПуть = "D:\Proxima\_Logs\";
	Для каждого лЭлемент Из пИменаФайлов Цикл
		лИмя = лПуть + лЭлемент + ".Site_data";
		лФайл = Новый Файл(лИмя);
		Если лФайл.Существует() Тогда
			УдалитьФайлы(лИмя);
		КонецЕсли;
		
		лИмя = лПуть + лЭлемент + ".Site_url";
		лФайл = Новый Файл(лИмя);
		Если лФайл.Существует() Тогда
			УдалитьФайлы(лИмя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Функция ПолучитьУзелПрямогоОбмена() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбменССайтом.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ОбменССайтом КАК ОбменССайтом
		|ГДЕ
		|	НЕ ОбменССайтом.ЭтотУзел
		|	И ОбменССайтом.ПрямаяВыгрузкаНаСайт
		|	И ОбменССайтом.ИмяПользователя <> """"
		|	И ОбменССайтом.Пароль <> """"
		|	И ОбменССайтом.ВыгружатьОтчетИЗаказы";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Узел;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ВернутьТаблицуБлоковИзменения(ПараметрыВыгрузки, УзелИнформационнойБазы, НадоОтбиратьБлоки, НастройкиОтбора)
	Если Не НадоОтбиратьБлоки Тогда  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел", УзелИнформационнойБазы);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РекламныеБлокиИзменения.Ссылка КАК РекламныйБлок
			|ИЗ
			|	Справочник.РекламныеБлоки.Изменения КАК РекламныеБлокиИзменения
			|ГДЕ
			|	РекламныеБлокиИзменения.Узел = &Узел";
		РезультатКомпоновки = Запрос.Выполнить().Выгрузить();
		
	Иначе
		ТекстЗапроса="ВЫБРАТЬ
		|	ИтоговыеДанные.РекламныйБлок КАК РекламныйБлок,
		|";
		Если ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков.Количество() > 0 Тогда 
			НастройкиОтбора =  ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков;		
			Для А=0 По НастройкиОтбора.Количество()-1 Цикл
				ПолеОтбора=НастройкиОтбора[А];
				Если А = НастройкиОтбора.Количество()-1 Тогда
					ТекстЗапроса = ТекстЗапроса +	" ИтоговыеДанные.РекламныйБлок."+ПолеОтбора.ПутьКданным + " КАК "+ПолеОтбора.ИмяДляЗапроса;			
				Иначе
					ТекстЗапроса = ТекстЗапроса +	" ИтоговыеДанные.РекламныйБлок."+ПолеОтбора.ПутьКданным + " КАК "+ПолеОтбора.ИмяДляЗапроса+",";			
				КонецЕсли; 
			КонецЦикла;		
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +	"	
			|ИЗ
			|	(ВЫБРАТЬ
			|		РекламныеБлоки.Ссылка КАК РекламныйБлок
			|	ИЗ
			|		Справочник.РекламныеБлоки.Изменения КАК РекламныеБлоки
			|	ГДЕ
			|		НЕ РекламныеБлоки.Ссылка.ПометкаУдаления
			|		И НЕ РекламныеБлоки.Ссылка.ЭтоГруппа
			|		И РекламныеБлоки.Узел = &Узел) КАК ИтоговыеДанные
			|";
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		СхемаКомпоновкиДанных  = ПланыОбмена.ОбменССайтом.ПолучитьМакет("Макет");
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса; 
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);    
		ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ПараметрыДанных.УстановитьЗначениеПараметра("Узел", УзелИнформационнойБазы);
		
		Если НастройкиОтбора.Количество() > 0 Тогда 
			
			НастройкиОтбора =  ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков;
			
			Для А=0 По НастройкиОтбора.Количество()-1 Цикл
				
				ПолеОтбора=НастройкиОтбора[А];
				ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора.ИмяДляЗапроса);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ПолеОтбора.ВидСравнения];
				ЭлементОтбора.Использование = Истина;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии или
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					
					МассивСтрокЗначений = УзелИнформационнойБазы.ЗначенияМножественногоОтбора.НайтиСтроки(Новый Структура("ВидСравнения, ПутьКданным, ИмяДляЗапроса", ПолеОтбора.ВидСравнения, ПолеОтбора.ПутьКДанным, ПолеОтбора.ИмяДляЗапроса));	
					СписокЗначенийОтбора = Новый СписокЗначений;
					Для каждого СтрокаМассива Из МассивСтрокЗначений Цикл
						СписокЗначенийОтбора.Добавить(СтрокаМассива.Значение);
					КонецЦикла; 	
					ЭлементОтбора.ПравоеЗначение = СписокЗначенийОтбора;	
				Иначе
					ЭлементОтбора.ПравоеЗначение = ПолеОтбора.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Настройки = КомпоновщикНастроек.Настройки; 	
		
		РезультатКомпоновки = Новый ТаблицаЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	КонецЕсли;
	
	Возврат РезультатКомпоновки; 
КонецФункции

Функция ПолучитьТаблицуСведенийПоДопПолямРекламныхБлоков(ПоляДополнительнойИнформации, РекламныеБлоки) 
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РекламныеБлоки.Ссылка КАК РекламныйБлок,
		|	РекламныеБлоки.ДатаУдаления,
		|//РеквизитыДопПолей
		|	РекламныеБлоки.ДатаУстановки
		|ИЗ
		|	Справочник.РекламныеБлоки КАК РекламныеБлоки
		|//СоединенияТаблицСвойствДопПолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РазрешенияНаЭксплуатациюОССрезПоследних.Конструкция КАК Конструкция,
		|			РазрешенияНаЭксплуатациюОССрезПоследних.Документ КАК Документ
		|		ИЗ
		|			РегистрСведений.РазрешенияНаЭксплуатациюОС.СрезПоследних(&НачПериода, ) КАК РазрешенияНаЭксплуатациюОССрезПоследних
		|		) КАК РазрешенияНаУстановку
		|		ПО РекламныеБлоки.Конструкция = РазрешенияНаУстановку.Конструкция
		|ГДЕ
		|	РекламныеБлоки.Ссылка В (&РекламныеБлоки)";
	
	ПостроительОтчета = Новый Запрос;
	
	РеквизитыДопПолей = "";
	СоединенияТаблицСвойствДопПолей = "";
	Для Каждого СтрокаДопПоля ИЗ ПоляДополнительнойИнформации Цикл
		Если СтрокаДопПоля.Использование Тогда
			Если СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.РеквизитРекламногоБлока Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "РекламныеБлоки." + СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных + " КАК " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных=Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СвойствоРекламногоБлока Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ЗапросПоСвойству" + СтрокаДопПоля.НомерСтроки + ".Значение КАК " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + Обработки.ПланРазмещений.ПолучитьТекстЗапросаТаблицыСвойствРекламныхБлоков(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СвойствоУчреждения Тогда
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + Обработки.ПланРазмещений.ПолучитьТекстЗапросаТаблицыСвойствУчреждений(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.РеквизитОСРекламнойКонструкции Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ЗапросПоПараметрамОСРК" + СтрокаДопПоля.НомерСтроки + ".Значение КАК " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + ПолучитьТекстЗапросаТаблицыПараметровОСРК(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ДопПоле" + СтрокаДопПоля.НомерСтроки, СтрокаДопПоля.ИмяДопПоля.Наименование);	
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.РеквизитУстановкиРК Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ЗапросПоПараметрамУстановкиРК" + СтрокаДопПоля.НомерСтроки + ".Значение КАК " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + ПолучитьТекстЗапросаТаблицыПараметровУстановкиРК(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ДопПоле" + СтрокаДопПоля.НомерСтроки, СтрокаДопПоля.ИмяДопПоля.Наименование);	
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаМонтажныхРабот Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ЗапросПоЦенамМонтажныхРабот" + СтрокаДопПоля.НомерСтроки + ".Значение КАК " + СтрЗаменить (ТРег(СтрокаДопПоля.ИмяДляЗапроса), " ", "")+","+Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + Обработки.ПланРазмещений.ПолучитьТекстЗапросаТаблицыЦенМонтажныхРабот(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаРазмещения Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ВЫБОР
				|	КОГДА ЗапросПоЦенамРекламныхБлоков" + СтрокаДопПоля.НомерСтроки + ".Значение ЕСТЬ NULL 
				|	ТОГДА ЗапросПоЦенамМедиапродуктов" + СтрокаДопПоля.НомерСтроки + ".Значение
				|	ИНАЧЕ ЗапросПоЦенамРекламныхБлоков" + СтрокаДопПоля.НомерСтроки + ".Значение
				|	КОНЕЦ как "+СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + Обработки.ПланРазмещений.ПолучитьТекстЗапросаТаблицыЦенРекламныхБлоков(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
				ПостроительОтчета.Параметры.Вставить("ВторойПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ПериодЦены);
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.ЦенаПечатиРИМ Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ВЫБОР
				|	КОГДА ЗапросПоЦенамПечатиРекламныхБлоков" + СтрокаДопПоля.НомерСтроки + ".Значение ЕСТЬ NULL 
				|	ТОГДА ЗапросПоЦенамПечатиПоРазмерам" + СтрокаДопПоля.НомерСтроки + ".Значение
				|	ИНАЧЕ ЗапросПоЦенамПечатиРекламныхБлоков" + СтрокаДопПоля.НомерСтроки + ".Значение
				|	КОНЕЦ как " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + Обработки.ПланРазмещений.ПолучитьТекстЗапросаТаблицыЦенПечатиРекламныхБлоков(СтрокаДопПоля);
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
			ИначеЕсли СтрокаДопПоля.ИмяДопПоля.ВидИсточникаДанных = Перечисления.ИсточникиДанныхПолейДополнительноИнформации.СсылкаНаКартуРекламногоБлока Тогда
				РеквизитыДопПолей = РеквизитыДопПолей + "ЗапросСсылкиРекламныхБлоковНаАdvMap" + СтрокаДопПоля.НомерСтроки + ".Значение КАК " + СтрокаДопПоля.ИмяДляЗапроса + "," + Символы.ПС;
				СоединенияТаблицСвойствДопПолей = СоединенияТаблицСвойствДопПолей + ПолучитьТекстЗапросаТаблицыСсылокНаКартуAdvMap(СтрокаДопПоля);	
				ПостроительОтчета.Параметры.Вставить("ПараметрДопПоля" + СтрокаДопПоля.НомерСтроки,СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//РеквизитыДопПолей", РеквизитыДопПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединенияТаблицСвойствДопПолей", СоединенияТаблицСвойствДопПолей);
	
	ПостроительОтчета.Параметры.Вставить("НачПериода", ТекущаяДата());
	ПостроительОтчета.Параметры.Вставить("РекламныеБлоки", РекламныеБлоки);
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	РезультатЗапроса = ПостроительОтчета.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	  
	
КонецФункции

Функция ПолучитьТекстЗапросаТаблицыПараметровОСРК(СтрокаДопПоля)
	Возврат "ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.ОсновноеСредство КАК Конструкция,
		|	ПервоначальныеСведенияОС."+СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных+" КАК Значение
		|ИЗ
		|РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&НачПериода) КАК ПервоначальныеСведенияОС) КАК ЗапросПоПараметрамОСРК"+СтрокаДопПоля.НомерСтроки+"
		|ПО РекламныеБлоки.Ссылка.Конструкция = ЗапросПоПараметрамОСРК"+СтрокаДопПоля.НомерСтроки+".Конструкция"+Символы.ПС;	
КонецФункции

Функция ПолучитьТекстЗапросаТаблицыСсылокНаКартуAdvMap(СтрокаДопПоля)
	Возврат "ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	СсылкиРекламныхБлоковНаАdvMap.РекламныйБлок КАК РекламныйБлокСсылки,
		|	СсылкиРекламныхБлоковНаАdvMap.СсылкаНаКарту КАК Значение
		|ИЗ
		|РегистрСведений.СсылкиРекламныхБлоковНаАdvMap КАК СсылкиРекламныхБлоковНаАdvMap) КАК ЗапросСсылкиРекламныхБлоковНаАdvMap"+СтрокаДопПоля.НомерСтроки+"
		|ПО РекламныеБлоки.Ссылка = ЗапросСсылкиРекламныхБлоковНаАdvMap"+СтрокаДопПоля.НомерСтроки+".РекламныйБлокСсылки"+Символы.ПС;	
КонецФункции

Функция ПолучитьТекстЗапросаТаблицыПараметровУстановкиРК(СтрокаДопПоля)
	Возврат "ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	РеквизитыРекламныхКонструкций.Конструкция КАК Конструкция,
		|	РеквизитыРекламныхКонструкций."+СтрокаДопПоля.ИмяДопПоля.ЗначениеИсточникаДанных+" КАК Значение
		|ИЗ
		|РегистрСведений.РеквизитыРекламныхКонструкций.СрезПоследних(&НачПериода) КАК РеквизитыРекламныхКонструкций) КАК ЗапросПоПараметрамУстановкиРК"+СтрокаДопПоля.НомерСтроки+"
		|ПО РекламныеБлоки.Ссылка.Конструкция = ЗапросПоПараметрамУстановкиРК"+СтрокаДопПоля.НомерСтроки+".Конструкция"+Символы.ПС;	
КонецФункции

Функция ПолучитьТаблицуЗанятости(ПараметрыВыгрузки, ВыгружатьПоДням, ВыгружатьПоНеделям, НачПериода, КонПериода, Узел) 
	Запрос = Новый Запрос;
	Если ВыгружатьПоДням Тогда
		ТаблицаПериодов = ВернутьТаблицуПериодовПоДням(НачПериода, КонПериода);
	ИначеЕсли ВыгружатьПоНеделям Тогда
		ТаблицаПериодов = ВернутьТаблицуПериодовПоНеделям(НачПериода, КонПериода);
	Иначе
		ТаблицаПериодов = ВернутьТаблицуПериодовДляЗапроса(НачПериода, КонПериода);
	КонецЕсли;
	КолПериодов = ТаблицаПериодов.Количество();
	СтрокаТаб = 0;
	Если КолПериодов > 1 Тогда 
		Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Если СтрокаТаб = 0 Тогда
				ТекстЗапроса =
					" ВЫБРАТЬ
					|	" + СтрокаПериода.НачалоПериода + " КАК НачалоПериода,
					|	" + СтрокаПериода.КонецПериода + "КАК КонецПериода
					|ПОМЕСТИТЬ СписокПериодов";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
					|
					|   ОБЪЕДИНИТЬ ВСЕ
					|
					|   ВЫБРАТЬ
					|	" + СтрокаПериода.НачалоПериода + ",
					|	" + СтрокаПериода.КонецПериода;
			КонецЕсли;
			СтрокаТаб = СтрокаТаб + 1;
		КонецЦикла;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РекламныеБлоки.Ссылка КАК РекламныйБлок,
		|	РекламныеБлоки.ДатаУстановки,
		|	РекламныеБлоки.ДатаУдаления
		|ПОМЕСТИТЬ СписокБлоков
		|ИЗ
		|	Справочник.РекламныеБлоки КАК РекламныеБлоки
		|ГДЕ
		|	НЕ РекламныеБлоки.ПометкаУдаления
		|	И НЕ РекламныеБлоки.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокБлоков.РекламныйБлок,
		|	СписокБлоков.ДатаУстановки,
		|	СписокБлоков.ДатаУдаления
		|ПОМЕСТИТЬ СписокРекламныхБлоков
		|ИЗ
		|	СписокБлоков КАК СписокБлоков
		|ГДЕ
		|	СписокБлоков.ДатаУстановки <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныБлоковСрезПоследних.РекламныйБлок КАК РекламныйБлок,
		|	ЦеныБлоковСрезПоследних.Цена КАК Цена,
		|	ЦеныБлоковСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ УстановкаЦенБлоков1
		|ИЗ
		|	РегистрСведений.ЦеныБлоков.СрезПоследних(
		|			&НачПериода,
		|			ТипЦен = &ТипЦен
		|				И ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)) КАК ЦеныБлоковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныБлоков.РекламныйБлок,
		|	ЦеныБлоков.Цена,
		|	ЦеныБлоков.Период
		|ИЗ
		|	РегистрСведений.ЦеныБлоков КАК ЦеныБлоков
		|ГДЕ
		|	ЦеныБлоков.Период МЕЖДУ &НачПериода И &КонПериода
		|	И ЦеныБлоков.ТипЦен = &ТипЦен
		|	И ЦеныБлоков.ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныБлоковСрезПоследних.РекламныйБлок КАК РекламныйБлок,
		|	ЦеныБлоковСрезПоследних.Цена КАК Цена,
		|	ЦеныБлоковСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ УстановкаЦенБлоков2
		|ИЗ
		|	РегистрСведений.ЦеныБлоков.СрезПоследних(
		|			&НачПериода,
		|			ТипЦен = &ТипЦенАгентов
		|				И ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)) КАК ЦеныБлоковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныБлоков.РекламныйБлок,
		|	ЦеныБлоков.Цена,
		|	ЦеныБлоков.Период
		|ИЗ
		|	РегистрСведений.ЦеныБлоков КАК ЦеныБлоков
		|ГДЕ
		|	ЦеныБлоков.Период МЕЖДУ &НачПериода И &КонПериода
		|	И ЦеныБлоков.ТипЦен = &ТипЦенАгентов
		|	И ЦеныБлоков.ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УстановкаЦенБлоков1.РекламныйБлок КАК РекламныйБлок,
		|	УстановкаЦенБлоков1.Цена КАК Цена,
		|	УстановкаЦенБлоков1.Период КАК Период,
		|	0 КАК ЦенаАгента
		|ПОМЕСТИТЬ ТаблицаЦенБлоковОбработка
		|ИЗ
		|	УстановкаЦенБлоков1 КАК УстановкаЦенБлоков1
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УстановкаЦенБлоков2.РекламныйБлок,
		|	0,
		|	УстановкаЦенБлоков2.Период,
		|	УстановкаЦенБлоков2.Цена
		|ИЗ
		|	УстановкаЦенБлоков2 КАК УстановкаЦенБлоков2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ УстановкаЦенБлоков1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ УстановкаЦенБлоков2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦенБлоковОбработка.РекламныйБлок,
		|	МАКСИМУМ(ТаблицаЦенБлоковОбработка.Цена) КАК Цена,
		|	ТаблицаЦенБлоковОбработка.Период,
		|	МАКСИМУМ(ТаблицаЦенБлоковОбработка.ЦенаАгента) КАК ЦенаАгента
		|ПОМЕСТИТЬ ТаблицаЦенБлоков
		|ИЗ
		|	ТаблицаЦенБлоковОбработка КАК ТаблицаЦенБлоковОбработка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЦенБлоковОбработка.РекламныйБлок,
		|	ТаблицаЦенБлоковОбработка.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЦенБлоковОбработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктовСрезПоследних.Медиапродукт КАК Медиапродукт,
		|	ЦеныМедиапродуктовСрезПоследних.Цена КАК Цена,
		|	ЦеныМедиапродуктовСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ЦеныМедиапродукта1
		|ИЗ
		|	РегистрСведений.ЦеныМедиапродуктов.СрезПоследних(
		|			&НачПериода,
		|			ТипЦен = &ТипЦен
		|				И ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)) КАК ЦеныМедиапродуктовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктов.Медиапродукт,
		|	ЦеныМедиапродуктов.Цена,
		|	ЦеныМедиапродуктов.Период
		|ИЗ
		|	РегистрСведений.ЦеныМедиапродуктов КАК ЦеныМедиапродуктов
		|ГДЕ
		|	ЦеныМедиапродуктов.ТипЦен = &ТипЦен
		|	И ЦеныМедиапродуктов.ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)
		|	И ЦеныМедиапродуктов.Период МЕЖДУ &НачПериода И &КонПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктовСрезПоследних.Медиапродукт КАК Медиапродукт,
		|	ЦеныМедиапродуктовСрезПоследних.Цена КАК Цена,
		|	ЦеныМедиапродуктовСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ЦеныМедиапродуктов2
		|ИЗ
		|	РегистрСведений.ЦеныМедиапродуктов.СрезПоследних(
		|			&НачПериода,
		|			ТипЦен = &ТипЦенАгентов
		|				И ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)) КАК ЦеныМедиапродуктовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктов.Медиапродукт,
		|	ЦеныМедиапродуктов.Цена,
		|	ЦеныМедиапродуктов.Период
		|ИЗ
		|	РегистрСведений.ЦеныМедиапродуктов КАК ЦеныМедиапродуктов
		|ГДЕ
		|	ЦеныМедиапродуктов.ТипЦен = &ТипЦенАгентов
		|	И ЦеныМедиапродуктов.ПериодРазмещений = ЗНАЧЕНИЕ(Перечисление.ПериодичностьРазмещения.Месяц)
		|	И ЦеныМедиапродуктов.Период МЕЖДУ &НачПериода И &КонПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродукта1.Медиапродукт КАК Медиапродукт,
		|	ЦеныМедиапродукта1.Цена КАК Цена,
		|	ЦеныМедиапродукта1.Период КАК Период,
		|	0 КАК ЦенаАгента
		|ПОМЕСТИТЬ ЦеныМедиапродуктовОбработка
		|ИЗ
		|	ЦеныМедиапродукта1 КАК ЦеныМедиапродукта1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктов2.Медиапродукт,
		|	0,
		|	ЦеныМедиапродуктов2.Период,
		|	ЦеныМедиапродуктов2.Цена
		|ИЗ
		|	ЦеныМедиапродуктов2 КАК ЦеныМедиапродуктов2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродукта1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродуктов2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктовОбработка.Медиапродукт,
		|	МАКСИМУМ(ЦеныМедиапродуктовОбработка.Цена) КАК Цена,
		|	ЦеныМедиапродуктовОбработка.Период,
		|	МАКСИМУМ(ЦеныМедиапродуктовОбработка.ЦенаАгента) КАК ЦенаАгента
		|ПОМЕСТИТЬ ТаблицаЦенМедиапродуктов
		|ИЗ
		|	ЦеныМедиапродуктовОбработка КАК ЦеныМедиапродуктовОбработка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныМедиапродуктовОбработка.Медиапродукт,
		|	ЦеныМедиапродуктовОбработка.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродуктовОбработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыНеиспользования.РекламныйБлок КАК РекламныйБлок,
		|	ПериодыНеиспользования.ДатаНачала КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПериодыНеиспользования.ДатаОкончания = &ПустаяДата
		|			ТОГДА &КонПериода
		|		ИНАЧЕ ПериодыНеиспользования.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ПериодыНеиспользования
		|ИЗ
		|	РегистрСведений.ПериодыНеиспользованияРекламныхБлоков КАК ПериодыНеиспользования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокРекламныхБлоков КАК СписокРекламныхБлоков
		|		ПО ПериодыНеиспользования.РекламныйБлок = СписокРекламныхБлоков.РекламныйБлок
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПериодыНеиспользования.ДатаОкончания = &ПустаяДата
		|				ТОГДА ПериодыНеиспользования.ДатаНачала <= &КонПериода
		|			ИНАЧЕ ПериодыНеиспользования.ДатаНачала МЕЖДУ &НачПериода И &КонПериода
		|					ИЛИ ПериодыНеиспользования.ДатаОкончания МЕЖДУ &НачПериода И &КонПериода
		|					ИЛИ ПериодыНеиспользования.ДатаНачала <= &НачПериода
		|						И ПериодыНеиспользования.ДатаОкончания >= &КонПериода
		|					ИЛИ ПериодыНеиспользования.ДатаНачала <= &НачПериода
		|						И ПериодыНеиспользования.ДатаОкончания >= &КонПериода
		|		КОНЕЦ
		|{ГДЕ
		|	ПериодыНеиспользования.РекламныйБлок.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокБлоков.РекламныйБлок КАК РекламныйБлок,
		|	СписокПериодов.НачалоПериода КАК НачалоПериода,
		|	СписокПериодов.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ СписокПериодовБлоков
		|ИЗ
		|	СписокПериодов КАК СписокПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокБлоков КАК СписокБлоков
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПериодыНеиспользования.РекламныйБлок ЕСТЬ NULL
		|			ТОГДА &ПустаяДата
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПериодыНеиспользования.ДатаНачала <= СписокПериодовБлоков.НачалоПериода
		|					ТОГДА СписокПериодовБлоков.НачалоПериода
		|				ИНАЧЕ ПериодыНеиспользования.ДатаНачала
		|			КОНЕЦ
		|	КОНЕЦ КАК ЛеваяГраница,
		|	ВЫБОР
		|		КОГДА ПериодыНеиспользования.ДатаОкончания >= СписокПериодовБлоков.КонецПериода
		|			ТОГДА СписокПериодовБлоков.КонецПериода
		|		ИНАЧЕ ПериодыНеиспользования.ДатаОкончания
		|	КОНЕЦ КАК ПраваяГраница,
		|	СписокПериодовБлоков.РекламныйБлок КАК РекламныйБлок,
		|	СписокПериодовБлоков.НачалоПериода КАК НачалоПериода,
		|	СписокПериодовБлоков.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ ПериодыАктивныхБлоков11
		|ИЗ
		|	СписокПериодовБлоков КАК СписокПериодовБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыНеиспользования КАК ПериодыНеиспользования
		|		ПО (ПериодыНеиспользования.ДатаНачала <= СписокПериодовБлоков.НачалоПериода
		|					И ПериодыНеиспользования.ДатаОкончания >= СписокПериодовБлоков.НачалоПериода
		|				ИЛИ ПериодыНеиспользования.ДатаНачала <= СписокПериодовБлоков.КонецПериода
		|					И ПериодыНеиспользования.ДатаОкончания >= СписокПериодовБлоков.КонецПериода
		|				ИЛИ ПериодыНеиспользования.ДатаНачала >= СписокПериодовБлоков.НачалоПериода
		|					И ПериодыНеиспользования.ДатаНачала <= СписокПериодовБлоков.КонецПериода
		|				ИЛИ ПериодыНеиспользования.ДатаНачала <= СписокПериодовБлоков.КонецПериода
		|					И ПериодыНеиспользования.ДатаОкончания = &ПустаяДата)
		|			И СписокПериодовБлоков.РекламныйБлок = ПериодыНеиспользования.РекламныйБлок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодыНеиспользования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокПериодовБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыАктивныхБлоков11.РекламныйБлок КАК РекламныйБлок,
		|	ПериодыАктивныхБлоков11.НачалоПериода КАК НачалоПериода,
		|	ПериодыАктивныхБлоков11.КонецПериода КАК КонецПериода,
		|	СУММА(ВЫБОР
		|			КОГДА ПериодыАктивныхБлоков11.ЛеваяГраница = &ПустаяДата
		|				ТОГДА 0
		|			ИНАЧЕ РАЗНОСТЬДАТ(ПериодыАктивныхБлоков11.ЛеваяГраница, ПериодыАктивныхБлоков11.ПраваяГраница, ДЕНЬ) + 1
		|		КОНЕЦ) КАК РазмерНеиспользования
		|ПОМЕСТИТЬ ПериодыАктывныхБлоков1
		|ИЗ
		|	СписокБлоков КАК СписокБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыАктивныхБлоков11 КАК ПериодыАктивныхБлоков11
		|		ПО СписокБлоков.РекламныйБлок = ПериодыАктивныхБлоков11.РекламныйБлок
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыАктивныхБлоков11.НачалоПериода,
		|	ПериодыАктивныхБлоков11.КонецПериода,
		|	ПериодыАктивныхБлоков11.РекламныйБлок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодыАктивныхБлоков11
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокВсехБлоков.РекламныйБлок КАК РекламныйБлок,
		|	СписокПериодов.НачалоПериода КАК НачалоПериода,
		|	СписокПериодов.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ СпискоВсехБлоков
		|ИЗ
		|	СписокБлоков КАК СписокВсехБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПериодов КАК СписокПериодов
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокБлоков.ДатаУстановки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПериодыАктывныхБлоков1.РазмерНеиспользования >= РАЗНОСТЬДАТ(СпискоВсехБлоков.НачалоПериода, СпискоВсехБлоков.КонецПериода, ДЕНЬ) + 1
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК БлокАктивен,
		|	ВЫРАЗИТЬ(СпискоВсехБлоков.РекламныйБлок КАК Справочник.РекламныеБлоки) КАК РекламныйБлок,
		|	СпискоВсехБлоков.НачалоПериода КАК НачалоПериода,
		|	СпискоВсехБлоков.КонецПериода КАК КонецПериода,
		|	ВЫБОР
		|		КОГДА СписокБлоков.РекламныйБлок ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СписокБлоков.ДатаУстановки < СпискоВсехБлоков.НачалоПериода
		|					ТОГДА ВЫБОР
		|							КОГДА СписокБлоков.ДатаУдаления > СпискоВсехБлоков.НачалоПериода
		|									И СписокБлоков.ДатаУдаления < СпискоВсехБлоков.КонецПериода
		|								ТОГДА РАЗНОСТЬДАТ(СпискоВсехБлоков.НачалоПериода, СписокБлоков.ДатаУдаления, ДЕНЬ) + 1 - ПериодыАктывныхБлоков1.РазмерНеиспользования
		|							ИНАЧЕ РАЗНОСТЬДАТ(СпискоВсехБлоков.НачалоПериода, СпискоВсехБлоков.КонецПериода, ДЕНЬ) + 1 - ПериодыАктывныхБлоков1.РазмерНеиспользования
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА СписокБлоков.ДатаУдаления > СпискоВсехБлоков.НачалоПериода
		|								И СписокБлоков.ДатаУдаления < СпискоВсехБлоков.КонецПериода
		|							ТОГДА РАЗНОСТЬДАТ(СписокБлоков.ДатаУстановки, СписокБлоков.ДатаУдаления, ДЕНЬ) + 1 - ПериодыАктывныхБлоков1.РазмерНеиспользования
		|						ИНАЧЕ РАЗНОСТЬДАТ(СписокБлоков.ДатаУстановки, СпискоВсехБлоков.КонецПериода, ДЕНЬ) + 1 - ПериодыАктывныхБлоков1.РазмерНеиспользования
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПлановыйРазмерПериода
		|ПОМЕСТИТЬ ПериодыАктивныхБлоков
		|ИЗ
		|	СпискоВсехБлоков КАК СпискоВсехБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокБлоков КАК СписокБлоков
		|		ПО СпискоВсехБлоков.РекламныйБлок = СписокБлоков.РекламныйБлок
		|			И (СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.НачалоПериода
		|					И СписокБлоков.ДатаУдаления >= СпискоВсехБлоков.НачалоПериода
		|				ИЛИ СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|					И СписокБлоков.ДатаУдаления >= СпискоВсехБлоков.КонецПериода
		|				ИЛИ СписокБлоков.ДатаУстановки >= СпискоВсехБлоков.НачалоПериода
		|					И СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|				ИЛИ СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|					И СписокБлоков.ДатаУдаления = &ПустаяДата)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыАктывныхБлоков1 КАК ПериодыАктывныхБлоков1
		|		ПО СпискоВсехБлоков.РекламныйБлок = ПериодыАктывныхБлоков1.РекламныйБлок
		|			И СпискоВсехБлоков.НачалоПериода = ПериодыАктывныхБлоков1.НачалоПериода
		|			И СпискоВсехБлоков.КонецПериода = ПериодыАктывныхБлоков1.КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодыАктывныхБлоков1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокБлоков.ДатаУстановки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК БлокАктивен,
		|	ВЫРАЗИТЬ(СпискоВсехБлоков.РекламныйБлок КАК Справочник.РекламныеБлоки) КАК РекламныйБлок,
		|	СпискоВсехБлоков.НачалоПериода КАК НачалоПериода,
		|	СпискоВсехБлоков.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ ПериодыБлоковРазмещения
		|ИЗ
		|	СпискоВсехБлоков КАК СпискоВсехБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокБлоков КАК СписокБлоков
		|		ПО СпискоВсехБлоков.РекламныйБлок = СписокБлоков.РекламныйБлок
		|			И (СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.НачалоПериода
		|					И СписокБлоков.ДатаУдаления >= СпискоВсехБлоков.НачалоПериода
		|				ИЛИ СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|					И СписокБлоков.ДатаУдаления >= СпискоВсехБлоков.КонецПериода
		|				ИЛИ СписокБлоков.ДатаУстановки >= СпискоВсехБлоков.НачалоПериода
		|					И СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|				ИЛИ СписокБлоков.ДатаУстановки <= СпискоВсехБлоков.КонецПериода
		|					И СписокБлоков.ДатаУдаления = &ПустаяДата)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыБлоковРазмещения.РекламныйБлок КАК РекламныйБлок,
		|	СеткаРазмещений.ДатаНачала КАК ДатаНачала,
		|	СеткаРазмещений.ДатаОкончания КАК ДатаОкончания,
		|	СУММА(ВЫБОР
		|			КОГДА СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Новый)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Отклонен)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.ВОчереди)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьРазмещение,
		|	СУММА(ВЫБОР
		|			КОГДА СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Утвержден)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.НаУтверждении)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьУтвержденныеРазмещения,
		|	СУММА(ВЫБОР
		|			КОГДА СеткаРазмещений.Заказ ЕСТЬ NULL
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Новый)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Отклонен)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.ВОчереди)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА СеткаРазмещений.ДатаНачала < ПериодыБлоковРазмещения.НачалоПериода
		|						ТОГДА ВЫБОР
		|								КОГДА СеткаРазмещений.ДатаОкончания > ПериодыБлоковРазмещения.КонецПериода
		|									ТОГДА РАЗНОСТЬДАТ(ПериодыБлоковРазмещения.НачалоПериода, ПериодыБлоковРазмещения.КонецПериода, ДЕНЬ) + 1
		|								ИНАЧЕ РАЗНОСТЬДАТ(ПериодыБлоковРазмещения.НачалоПериода, СеткаРазмещений.ДатаОкончания, ДЕНЬ) + 1
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА СеткаРазмещений.ДатаОкончания > ПериодыБлоковРазмещения.КонецПериода
		|								ТОГДА РАЗНОСТЬДАТ(СеткаРазмещений.ДатаНачала, ПериодыБлоковРазмещения.КонецПериода, ДЕНЬ) + 1
		|							ИНАЧЕ РАЗНОСТЬДАТ(СеткаРазмещений.ДатаНачала, СеткаРазмещений.ДатаОкончания, ДЕНЬ) + 1
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК РазмерПериодаРазмещений,
		|	СУММА(ВЫБОР
		|			КОГДА СеткаРазмещений.Заказ ЕСТЬ NULL
		|					ИЛИ СеткаРазмещений.СтатусРазмещения <> ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Утвержден)
		|					ИЛИ СеткаРазмещений.СтатусРазмещения <> ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.НаУтверждении)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА СеткаРазмещений.ДатаНачала < ПериодыБлоковРазмещения.НачалоПериода
		|						ТОГДА ВЫБОР
		|								КОГДА СеткаРазмещений.ДатаОкончания > ПериодыБлоковРазмещения.КонецПериода
		|									ТОГДА РАЗНОСТЬДАТ(ПериодыБлоковРазмещения.НачалоПериода, ПериодыБлоковРазмещения.КонецПериода, ДЕНЬ) + 1
		|								ИНАЧЕ РАЗНОСТЬДАТ(ПериодыБлоковРазмещения.НачалоПериода, СеткаРазмещений.ДатаОкончания, ДЕНЬ) + 1
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА СеткаРазмещений.ДатаОкончания > ПериодыБлоковРазмещения.КонецПериода
		|								ТОГДА РАЗНОСТЬДАТ(СеткаРазмещений.ДатаНачала, ПериодыБлоковРазмещения.КонецПериода, ДЕНЬ) + 1
		|							ИНАЧЕ РАЗНОСТЬДАТ(СеткаРазмещений.ДатаНачала, СеткаРазмещений.ДатаОкончания, ДЕНЬ) + 1
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК РазмерПериодаУтвержденныхРазмещений,
		|	ПериодыБлоковРазмещения.НачалоПериода КАК НачалоПериода,
		|	ПериодыБлоковРазмещения.КонецПериода КАК КонецПериода,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СеткаРазмещений.СтатусРазмещения = ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.ВРезерве)
		|				ТОГДА СеткаРазмещений.СрокРезерва
		|			ИНАЧЕ &МаксимальнаяДата
		|		КОНЕЦ) КАК СрокРезерва
		|ПОМЕСТИТЬ ПланПродаж
		|ИЗ
		|	ПериодыБлоковРазмещения КАК ПериодыБлоковРазмещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СеткаРазмещений КАК СеткаРазмещений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокРекламныхБлоков КАК СписокРекламныхБлоков
		|			ПО СеткаРазмещений.РекламныйБлок = СписокРекламныхБлоков.РекламныйБлок
		|		ПО ПериодыБлоковРазмещения.РекламныйБлок = СеткаРазмещений.РекламныйБлок
		|			И (СеткаРазмещений.ДатаНачала <= ПериодыБлоковРазмещения.НачалоПериода
		|					И СеткаРазмещений.ДатаОкончания >= ПериодыБлоковРазмещения.НачалоПериода
		|				ИЛИ СеткаРазмещений.ДатаНачала >= ПериодыБлоковРазмещения.НачалоПериода
		|					И СеткаРазмещений.ДатаОкончания <= ПериодыБлоковРазмещения.КонецПериода
		|				ИЛИ СеткаРазмещений.ДатаНачала <= ПериодыБлоковРазмещения.НачалоПериода
		|					И СеткаРазмещений.ДатаОкончания >= ПериодыБлоковРазмещения.КонецПериода
		|				ИЛИ СеткаРазмещений.ДатаНачала <= ПериодыБлоковРазмещения.КонецПериода
		|					И СеткаРазмещений.ДатаОкончания >= ПериодыБлоковРазмещения.КонецПериода)
		|ГДЕ
		|	(СеткаРазмещений.ДатаНачала <= &НачПериода
		|				И СеткаРазмещений.ДатаОкончания >= &НачПериода
		|			ИЛИ СеткаРазмещений.ДатаНачала >= &НачПериода
		|				И СеткаРазмещений.ДатаОкончания <= &КонПериода
		|			ИЛИ СеткаРазмещений.ДатаНачала <= &НачПериода
		|				И СеткаРазмещений.ДатаОкончания >= &КонПериода
		|			ИЛИ СеткаРазмещений.ДатаНачала <= &КонПериода
		|				И СеткаРазмещений.ДатаОкончания >= &КонПериода)
		|	И СеткаРазмещений.СтатусРазмещения <> ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Отклонен)
		|	И СеткаРазмещений.СтатусРазмещения <> ЗНАЧЕНИЕ(Перечисление.СтатусыРазмещений.Новый)
		|
		|СГРУППИРОВАТЬ ПО
		|	СеткаРазмещений.ДатаНачала,
		|	СеткаРазмещений.ДатаОкончания,
		|	ПериодыБлоковРазмещения.НачалоПериода,
		|	ПериодыБлоковРазмещения.КонецПериода,
		|	ПериодыБлоковРазмещения.РекламныйБлок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СпискоВсехБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодыБлоковРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокПериодов.НачалоПериода КАК НачалоПериода,
		|	СписокПериодов.КонецПериода КАК КонецПериода,
		|	ТаблицаЦенБлоков.РекламныйБлок КАК РекламныйБлок,
		|	ТаблицаЦенБлоков.Период КАК Период
		|ПОМЕСТИТЬ ЦеныБлоков11
		|ИЗ
		|	СписокПериодов КАК СписокПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенБлоков КАК ТаблицаЦенБлоков
		|		ПО СписокПериодов.КонецПериода >= ТаблицаЦенБлоков.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныБлоков11.НачалоПериода КАК НачалоПериода,
		|	ЦеныБлоков11.КонецПериода КАК КонецПериода,
		|	ЦеныБлоков11.РекламныйБлок КАК РекламныйБлок,
		|	МАКСИМУМ(ЦеныБлоков11.Период) КАК Период
		|ПОМЕСТИТЬ ЦеныБлоков1
		|ИЗ
		|	ЦеныБлоков11 КАК ЦеныБлоков11
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныБлоков11.КонецПериода,
		|	ЦеныБлоков11.НачалоПериода,
		|	ЦеныБлоков11.РекламныйБлок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныБлоков1.НачалоПериода КАК НачалоПериода,
		|	ЦеныБлоков1.КонецПериода КАК КонецПериода,
		|	ЦеныБлоков1.РекламныйБлок КАК РекламныйБлок,
		|	ТаблицаЦенБлоков.Цена КАК Цена,
		|	ТаблицаЦенБлоков.ЦенаАгента КАК ЦенаАгента
		|ПОМЕСТИТЬ ЦеныБлоков
		|ИЗ
		|	ЦеныБлоков1 КАК ЦеныБлоков1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенБлоков КАК ТаблицаЦенБлоков
		|		ПО ЦеныБлоков1.РекламныйБлок = ТаблицаЦенБлоков.РекламныйБлок
		|			И ЦеныБлоков1.Период = ТаблицаЦенБлоков.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныБлоков11
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныБлоков1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокПериодов.НачалоПериода КАК НачалоПериода,
		|	СписокПериодов.КонецПериода КАК КонецПериода,
		|	ТаблицаЦенМедиапродуктов.Период КАК Период,
		|	ТаблицаЦенМедиапродуктов.Медиапродукт КАК Медиапродукт
		|ПОМЕСТИТЬ ЦеныМедиапродуктов11
		|ИЗ
		|	СписокПериодов КАК СписокПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенМедиапродуктов КАК ТаблицаЦенМедиапродуктов
		|		ПО СписокПериодов.КонецПериода >= ТаблицаЦенМедиапродуктов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктов11.НачалоПериода КАК НачалоПериода,
		|	ЦеныМедиапродуктов11.КонецПериода КАК КонецПериода,
		|	МАКСИМУМ(ЦеныМедиапродуктов11.Период) КАК Период,
		|	ЦеныМедиапродуктов11.Медиапродукт КАК Медиапродукт
		|ПОМЕСТИТЬ ЦеныМедиапродуктов1
		|ИЗ
		|	ЦеныМедиапродуктов11 КАК ЦеныМедиапродуктов11
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныМедиапродуктов11.КонецПериода,
		|	ЦеныМедиапродуктов11.НачалоПериода,
		|	ЦеныМедиапродуктов11.Медиапродукт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныМедиапродуктов1.НачалоПериода КАК НачалоПериода,
		|	ЦеныМедиапродуктов1.КонецПериода КАК КонецПериода,
		|	ТаблицаЦенМедиапродуктов.Цена КАК Цена,
		|	ТаблицаЦенМедиапродуктов.Медиапродукт КАК Медиапродукт,
		|	ТаблицаЦенМедиапродуктов.ЦенаАгента КАК ЦенаАгента
		|ПОМЕСТИТЬ ЦеныМедиапродуктов
		|ИЗ
		|	ЦеныМедиапродуктов1 КАК ЦеныМедиапродуктов1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенМедиапродуктов КАК ТаблицаЦенМедиапродуктов
		|		ПО ЦеныМедиапродуктов1.Период = ТаблицаЦенМедиапродуктов.Период
		|			И ЦеныМедиапродуктов1.Медиапродукт = ТаблицаЦенМедиапродуктов.Медиапродукт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродуктов11
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродуктов1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЦенБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЦенМедиапродуктов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.ЕстьРазмещение ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ПланПродаж.ЕстьРазмещение
		|		КОНЕЦ) КАК ЕстьРазмещение,
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.ЕстьУтвержденныеРазмещения ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ ПланПродаж.ЕстьУтвержденныеРазмещения
		|		КОНЕЦ) КАК ЕстьУтвержденныеРазмещения,
		|	ПериодыАктивныхБлоков.БлокАктивен КАК БлокАктивен,
		|	ПериодыАктивныхБлоков.РекламныйБлок КАК РекламныйБлок,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Медиапродукт КАК Медиапродукт,
		|	ПериодыАктивныхБлоков.НачалоПериода КАК НачалоПериода,
		|	ПериодыАктивныхБлоков.КонецПериода КАК КонецПериода,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Владелец КАК Канал,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Наименование КАК НаименованиеБлока,
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.ЕстьРазмещение ЕСТЬ NULL
		|				ТОГДА ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей
		|			ИНАЧЕ ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей - ПланПродаж.ЕстьРазмещение
		|		КОНЕЦ) КАК Доступно,
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.ЕстьУтвержденныеРазмещения ЕСТЬ NULL
		|				ТОГДА ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей
		|			ИНАЧЕ ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей - ПланПродаж.ЕстьУтвержденныеРазмещения
		|		КОНЕЦ) КАК ДоступноБезРезерва,
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.РазмерПериодаРазмещений ЕСТЬ NULL
		|					ИЛИ ПериодыАктивныхБлоков.ПлановыйРазмерПериода = 0
		|					ИЛИ ЕСТЬNULL(ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ 100 * (ПланПродаж.РазмерПериодаРазмещений / (ПериодыАктивныхБлоков.ПлановыйРазмерПериода * ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей))
		|		КОНЕЦ) КАК ПроцентИспользования,
		|	СУММА(ВЫБОР
		|			КОГДА ПланПродаж.РазмерПериодаУтвержденныхРазмещений ЕСТЬ NULL
		|					ИЛИ ПериодыАктивныхБлоков.ПлановыйРазмерПериода = 0
		|					ИЛИ ЕСТЬNULL(ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ 100 * (ПланПродаж.РазмерПериодаУтвержденныхРазмещений / (ПериодыАктивныхБлоков.ПлановыйРазмерПериода * ПериодыАктивныхБлоков.РекламныйБлок.ТипБлока.КоличествоПоверхностей))
		|		КОНЕЦ) КАК ПроцентИспользованияБезРезерва,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПланПродаж.ЕстьРазмещение ЕСТЬ NULL
		|				ТОГДА &ПустаяДата
		|			ИНАЧЕ ПланПродаж.СрокРезерва
		|		КОНЕЦ) КАК СрокРезерва,
		|	ВЫБОР
		|		КОГДА ЦеныБлоков.Цена ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЦеныМедиапродуктов.Цена ЕСТЬ NULL
		|						ТОГДА 0
		|					ИНАЧЕ ЦеныМедиапродуктов.Цена
		|				КОНЕЦ
		|		ИНАЧЕ ЦеныБлоков.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныБлоков.ЦенаАгента ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЦеныМедиапродуктов.ЦенаАгента ЕСТЬ NULL
		|						ТОГДА 0
		|					ИНАЧЕ ЦеныМедиапродуктов.ЦенаАгента
		|				КОНЕЦ
		|		ИНАЧЕ ЦеныБлоков.ЦенаАгента
		|	КОНЕЦ КАК ЦенаАгента
		|ПОМЕСТИТЬ ИтоговыеДанные
		|ИЗ
		|	ПериодыАктивныхБлоков КАК ПериодыАктивныхБлоков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланПродаж КАК ПланПродаж
		|		ПО ПериодыАктивныхБлоков.РекламныйБлок = ПланПродаж.РекламныйБлок
		|			И ПериодыАктивныхБлоков.НачалоПериода = ПланПродаж.НачалоПериода
		|			И ПериодыАктивныхБлоков.КонецПериода = ПланПродаж.КонецПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныБлоков КАК ЦеныБлоков
		|		ПО ПериодыАктивныхБлоков.РекламныйБлок = ЦеныБлоков.РекламныйБлок
		|			И ПериодыАктивныхБлоков.НачалоПериода = ЦеныБлоков.НачалоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныМедиапродуктов КАК ЦеныМедиапродуктов
		|		ПО ПериодыАктивныхБлоков.РекламныйБлок.Медиапродукт = ЦеныМедиапродуктов.Медиапродукт
		|			И ПериодыАктивныхБлоков.НачалоПериода = ЦеныМедиапродуктов.НачалоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыАктивныхБлоков.БлокАктивен,
		|	ПериодыАктивныхБлоков.РекламныйБлок,
		|	ПериодыАктивныхБлоков.НачалоПериода,
		|	ПериодыАктивныхБлоков.КонецПериода,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Владелец,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Наименование,
		|	ПериодыАктивныхБлоков.РекламныйБлок.Медиапродукт,
		|	ВЫБОР
		|		КОГДА ЦеныБлоков.Цена ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЦеныМедиапродуктов.Цена ЕСТЬ NULL
		|						ТОГДА 0
		|					ИНАЧЕ ЦеныМедиапродуктов.Цена
		|				КОНЕЦ
		|		ИНАЧЕ ЦеныБлоков.Цена
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЦеныБлоков.ЦенаАгента ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЦеныМедиапродуктов.ЦенаАгента ЕСТЬ NULL
		|						ТОГДА 0
		|					ИНАЧЕ ЦеныМедиапродуктов.ЦенаАгента
		|				КОНЕЦ
		|		ИНАЧЕ ЦеныБлоков.ЦенаАгента
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПланПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодыАктивныхБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныМедиапродуктов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокРекламныхБлоков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанные.ЕстьРазмещение,
		|	ИтоговыеДанные.ЕстьУтвержденныеРазмещения,
		|	ИтоговыеДанные.БлокАктивен,
		|	ИтоговыеДанные.РекламныйБлок КАК РекламныйБлок,
		|	ИтоговыеДанные.Медиапродукт,
		|	ИтоговыеДанные.НачалоПериода КАК НачалоПериода,
		|	ИтоговыеДанные.КонецПериода,
		|	ИтоговыеДанные.НаименованиеБлока,
		|	ИтоговыеДанные.Доступно,
		|	ИтоговыеДанные.ДоступноБезРезерва,
		|	ИтоговыеДанные.ПроцентИспользования,
		|	ИтоговыеДанные.ПроцентИспользованияБезРезерва,
		|	ИтоговыеДанные.СрокРезерва,
		|	ВЫБОР
		|		КОГДА ИтоговыеДанные.БлокАктивен
		|			ТОГДА ВЫБОР
		|					КОГДА ИтоговыеДанные.ЕстьУтвержденныеРазмещения > 0
		|						ТОГДА 2
		|					КОГДА ИтоговыеДанные.ЕстьРазмещение > 0
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Состояние,
		|	ИтоговыеДанные.Цена,";
	Если ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков.Количество() > 0 Тогда
		НастройкиОтбора = ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков;
		Для А = 0 По НастройкиОтбора.Количество() - 1 Цикл
			ПолеОтбора = НастройкиОтбора[А];
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "	ИтоговыеДанные.РекламныйБлок." + ПолеОтбора.ПутьКданным + " КАК " + ПолеОтбора.ИмяДляЗапроса + ",";
		КонецЦикла;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|	ИтоговыеДанные.ЦенаАгента
		|ИЗ
		|	ИтоговыеДанные КАК ИтоговыеДанные
		|ГДЕ
		|	НЕ ИтоговыеДанные.РекламныйБлок.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	РекламныйБлок,
		|	НачалоПериода";
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПланыОбмена.ОбменССайтом.ПолучитьМакет("Макет");
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса; 
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);    
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("НачПериода",		НачПериода);
	ПараметрыДанных.УстановитьЗначениеПараметра("КонПериода",		КонПериода);
	ПараметрыДанных.УстановитьЗначениеПараметра("МаксимальнаяДата",	ДобавитьМесяц(КонПериода, 120));
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦен",			ПараметрыВыгрузки.ТипЦеныПродажиЧерезWeb);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦенАгентов",	ПараметрыВыгрузки.ТипЦеныПродажиАгентамЧерезWeb);
	ПараметрыДанных.УстановитьЗначениеПараметра("ПустаяДата",		Дата(1, 1, 1));
	ПараметрыДанных.УстановитьЗначениеПараметра("Период",			Дата(1, 1, 1));
	
	Если ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков.Количество() > 0 Тогда
		НастройкиОтбора = ПараметрыВыгрузки.ОтборПоЗанятостиРекламныхБлоков;
		
		Для А = 0 По НастройкиОтбора.Количество() - 1 Цикл
			ПолеОтбора = НастройкиОтбора[А];
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора.ИмяДляЗапроса);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ПолеОтбора.ВидСравнения];
			ЭлементОтбора.Использование = Истина;
			
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Или
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				
				МассивСтрокЗначений = ПараметрыВыгрузки.ЗначенияМножественногоОтбора.НайтиСтроки(
					Новый Структура("ВидСравнения, ПутьКданным, ИмяДляЗапроса", ПолеОтбора.ВидСравнения, ПолеОтбора.ПутьКДанным, ПолеОтбора.ИмяДляЗапроса));
				СписокЗначенийОтбора = Новый СписокЗначений();
				Для каждого СтрокаМассива Из МассивСтрокЗначений Цикл
					СписокЗначенийОтбора.Добавить(СтрокаМассива.Значение);
				КонецЦикла;
				ЭлементОтбора.ПравоеЗначение = СписокЗначенийОтбора;
			Иначе
				ЭлементОтбора.ПравоеЗначение = ПолеОтбора.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат РезультатКомпоновки;
КонецФункции

Функция ВернутьТаблицуПериодовПоНеделям(НачПериода, КонПериода) 
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода", ОписаниеТипаСтрока);
	ТаблицаПериодов.Колонки.Добавить("КонецПериода", ОписаниеТипаСтрока);
	
	НачальнаяДата 		= НачалоНедели(НачПериода)+86400*4;
	КоличествоПериодов 	= 0;
	День 				= "";
	Месяц 				= "";
	Год 				= "";
	
	Пока НачальнаяДата <= КонПериода Цикл
		СтрокаПериода = ТаблицаПериодов.Добавить();
		НДата = Формат(НачалоДня(НачальнаяДата), "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(НДата, День, Месяц, Год);
		СтрокаПериода.НачалоПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",0,0,0)";
		
		КДата = Формат(КонецДня(НачальнаяДата) + 86400*13, "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(КДата, День, Месяц, Год);
		СтрокаПериода.КонецПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",23,59,59)";
		НачальнаяДата = КонецДня(НачальнаяДата) + 86400*14;	
	КонецЦикла;
	
	ТаблицаПериодов.Индексы.Добавить("НачалоПериода");
	
	Возврат ТаблицаПериодов;
КонецФункции

Функция ВернутьТаблицуПериодовПоДням(НачПериода, КонПериода) 
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода", ОписаниеТипаСтрока);
	ТаблицаПериодов.Колонки.Добавить("КонецПериода", ОписаниеТипаСтрока);
	
	НачальнаяДата 		= НачПериода;
	КоличествоПериодов 	= 0;
	День 				= "";
	Месяц 				= "";
	Год 				= "";
	
	Пока НачальнаяДата <= КонПериода Цикл
		СтрокаПериода = ТаблицаПериодов.Добавить();
		НДата = Формат(НачалоДня(НачальнаяДата), "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(НДата, День, Месяц, Год);
		СтрокаПериода.НачалоПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",0,0,0)";
		НДата = Формат(КонецДня(НачальнаяДата), "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(НДата, День, Месяц, Год);
		СтрокаПериода.КонецПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",23,59,59)";
		НачальнаяДата = КонецДня(НачальнаяДата) + 1;	
	КонецЦикла;
	
	ТаблицаПериодов.Индексы.Добавить("НачалоПериода");
	
	Возврат ТаблицаПериодов;
КонецФункции

Функция ВернутьТаблицуПериодовДляЗапроса(НачПериода, КонПериода) 
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода", ОписаниеТипаСтрока);
	ТаблицаПериодов.Колонки.Добавить("КонецПериода", ОписаниеТипаСтрока);
	
	НачальнаяДата 		= НачПериода;
	КоличествоПериодов 	= 0;
	День 				= "";
	Месяц 				= "";
	Год 				= "";
	
	Пока НачальнаяДата <= КонПериода Цикл
		СтрокаПериода = ТаблицаПериодов.Добавить();
		НДата = Формат(НачалоМесяца(НачальнаяДата), "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(НДата, День, Месяц, Год);
		СтрокаПериода.НачалоПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",0,0,0)";
		НДата = Формат(КонецМесяца(НачальнаяДата), "ДФ=d.M.yyyy");
		ПеревестиДатуВЗапрос(НДата, День, Месяц, Год);
		СтрокаПериода.КонецПериода = "ДатаВремя(" + Год + "," + Месяц + "," + День + ",0,0,0)";
		НачальнаяДата = ДобавитьМесяц(НачалоМесяца(НачальнаяДата), 1);	
	КонецЦикла;
	
	ТаблицаПериодов.Индексы.Добавить("НачалоПериода");
	
	Возврат ТаблицаПериодов;
КонецФункции

Процедура ОбновитьДанныеСтрокиИзОбработкиРасчета(ОбработкаРасчета, Объект) 
	КлючСтроки = ОбработкаРасчета.КлючСтроки;
	
	ИзмененнаяСтрока = Объект.Реклама.НайтиСтроки(Новый Структура("КлючСтроки",КлючСтроки));
	
	Если ИзмененнаяСтрока.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ИзмененнаяСтрока[0], ОбработкаРасчета);
		
		//очищаем таблицу стоимости по периодам
		СтрокиСтоимостьПоПериодам = Объект.СтоимостьПоПериодам.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
		Если СтрокиСтоимостьПоПериодам.Количество() > 0 Тогда
			Для А=0 по СтрокиСтоимостьПоПериодам.Количество()-1 Цикл
				Объект.СтоимостьПоПериодам.Удалить(СтрокиСтоимостьПоПериодам.Получить(А));
			КонецЦикла;
		КонецЕсли;
		
		//заполняем таблицу стоимости по периодам новыми значениями
		Если ОбработкаРасчета.СтоимостьПоПериодам.Количество() > 0 Тогда
			Для Каждого СтрокаТЧ ИЗ ОбработкаРасчета.СтоимостьПоПериодам Цикл
				НоваяСтрокаТЧ = Объект.СтоимостьПоПериодам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				НоваяСтрокаТЧ.КлючСтроки = КлючСтроки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
